<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000//feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000//" rel="alternate" type="text/html" /><updated>2017-06-12T13:30:28+01:00</updated><id>http://localhost:4000//</id><title type="html">/^1 pat{2}ern 2 hap{2}ines{2}.*/</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">ScotlandJS 2016</title><link href="http://localhost:4000//techietalkie/2016/06/09/scotlandjs-2016.html" rel="alternate" type="text/html" title="ScotlandJS 2016" /><published>2016-06-09T15:27:37+01:00</published><updated>2016-06-09T15:27:37+01:00</updated><id>http://localhost:4000//techietalkie/2016/06/09/scotlandjs-2016</id><content type="html" xml:base="http://localhost:4000//techietalkie/2016/06/09/scotlandjs-2016.html">&lt;p&gt;Thursday June 2nd is a very sunny day, I have definitely overpacked and overdressed. It must be 20+˚C and I am in ... Edinburgh.&lt;br /&gt;
I have flown from London the day before.&lt;br /&gt;
What for? To attend &lt;a href=&quot;http://scotlandjs.com/&quot;&gt;ScotlandJS&lt;/a&gt;, courtesy of Codebar and ScotlandJS.&lt;br /&gt;
I do use JS a lot by day, even though I secretly expand my love and knowledge of Ruby by night. I honestly didn't know what to expect but with a touch of bravado and fake nonchalance, I walked to the Dynamic Earth venue hosting the 2-day event.&lt;br /&gt;
From an architecture point of view, it's a more than impressive venue. I follow the trail of people gently walking up to the entrance, feeling more and more like on a first day at school.&lt;br /&gt;
All of a sudden, uncool because on my own, not belonging because reasons, sweaty because of the warmth and my jumper. As I enter, the first thing that catches my eye is the code of conduct: 'no &amp;lt;insertgroup&amp;gt;phobia' repeated over and over and over on a big banner stand. My anxiety recedes. No bully in sight. Smiles everywhere, I feel better already. One of the volunteers welcomes me and hands me a name tag/schedule leaflet all packed in one - clever and efficient. Yellow lanyard for picture consent - why didn't I pick the purple?&lt;/p&gt;
&lt;p&gt;I walk in, lured by coffee and viennoiseries. I almost don't understand how but I introduce myself to another girl, living and working in Edinburgh, also on her own for these 2 days. So if only for that, thanks because her company was awesome and this was just the start.&lt;br /&gt;
What a start - &lt;a href=&quot;https://twitter.com/misslivirose&quot;&gt;Liv Erickson&lt;/a&gt; (@misslivirose) from Microsoft tackles VR, the why and the how. It's 9, I am barely awake, yet leaning in, captivated. So much so that, by the end of the talk, I feel like leaving to go play with &lt;a href=&quot;https://aframe.io/&quot;&gt;A-frame&lt;/a&gt;.&lt;br /&gt;
I am wondering how the following speaker will manage to keep my attention levels even half that high. &lt;a href=&quot;https://twitter.com/jemyoung&quot;&gt;Jem Young&lt;/a&gt; (@JemYoung) from Netflix talking about service workers does the trick. &lt;a href=&quot;https://twitter.com/Charlotteis&quot;&gt;Charlotte Spencer&lt;/a&gt; (@Charlotteis) does an amazing job at highlighting why opensource needs to be inclusive and pay attention to the language used. They also discuss the importance of naps. Language *is* important. As a non-native speaker (among other quirks), this is spot-on. I even find myself interested in MIDI when discussed by &lt;a href=&quot;https://twitter.com/Rumyra&quot;&gt;Ruth John&lt;/a&gt; (@Rumyra), as passionate and convincing as &lt;a href=&quot;https://twitter.com/KimCrayton1&quot;&gt;Kim Crayton&lt;/a&gt; (@KimCrayton1) on Overcoming the Challenges of Mentoring. Every 3 talks, we are invited to a break upstairs called 'discussion tracks' to address any further question we have on a given topic. I realise how dedicated and nice these speakers must be. Being (even gently) quizzed by peers is very intense and quite a commitment. Kudos to them.&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/mattpodwysocki&quot;&gt;Matthew Podwysocki&lt;/a&gt; (@mattpodwysocki) on Async programming and &lt;a href=&quot;https://twitter.com/dan_jenkins&quot;&gt;Dan Jenkins&lt;/a&gt; (@dan_jenkins) on Getting physical with Web Bluetooth sure know how to use props. Berlin-based &lt;a href=&quot;https://twitter.com/misprintedtype&quot;&gt;Ola Gasidlo&lt;/a&gt; (@misprintedtype) gives some very good insight on offline and some of its challenges. &lt;a href=&quot;https://twitter.com/kitation&quot;&gt;Chad&lt;/a&gt; (@kitation) ponders on when it's okay to ask about gender and how to do it. I had thought about what to put in the dreaded drop-down but had never actually questioned the validity of the question altogether. &lt;a href=&quot;https://twitter.com/substack&quot;&gt;James Halliday&lt;/a&gt; (@substack) hops on stage with a hat I thought - wrongly probably - a tribute to Jayne from Serenity. He discussed a fairer world by describing his P2P work off the grid. If I have to be honest, I would quit my job and go for strappy sandals and funky hat if I had a project and an experience comparable to his. I was impressed and inspired. Not every part of this planet faces the same technological challenges.&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/rmehner&quot;&gt;Robin Mehner&lt;/a&gt; (@rmehner) on Surviving Javascript makes me laugh a lot. I love his approach to coding and his appeal for more humility and inclusion in the community. He also addresses the adopt/know-it-all race. I did share more with Robin on the topic at the after-party on Friday, he also got me almost convinced to move to Berlin. I mean it's a cool city, so it wouldn't take much convincing.&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/Rumyra&quot;&gt;Ruth John&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/TimPietrusky&quot;&gt;Tim Pietrusky&lt;/a&gt; (@TimPietrusky) treat all of us to a 'nerd disco' at the end of Day 1. By that point, it gets surreal to be here, having fun with tech and like-minded people.&lt;br /&gt;
My brain then gets really fuzzy about chronology. I continue to see friendly faces and hear interesting voices talking about HTTP/2, cognitive biases when coding, mining your own data (including some guessing games which I resisted to participate to the HTTP/2 track - that was...hard), accessibility, electron, how big tv screens are mobile screens you can't touch at a 10ft distance, cellular automata and fear.&lt;br /&gt;
I get fully, entirely, completely starstruck by &lt;a href=&quot;https://twitter.com/ceejbot&quot;&gt;CJ Silverio&lt;/a&gt; (@ceejbot) from npm talking about 'Monitoring on a budget' - my awesomeness sensors are off the charts and I feel like a very very small dev in very very big uber cool pond.&lt;/p&gt;
&lt;p&gt;The team at ScotlandJS was funny, caring and organised. Everything went seamlessly (or was well hidden, same difference). The talks were as inspiring as content-rich.&lt;/p&gt;
&lt;p&gt;My personal take-aways:&lt;br /&gt;
Coding is ultimately about people, welcome/include everyone.&lt;br /&gt;
Take a breath and a nap and be the best you can be. Don't compete with others, compete with older versions of you.&lt;br /&gt;
Numbats, wombats and Jedis rock.&lt;/p&gt;
&lt;p&gt;If I have not yet convinced you to buy your tickets for next year, I just know I will and I truly hope to see you there.&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><category term="conference" /><category term="javascript" /><category term="js" /><category term="scotland" /><category term="VR" /><summary type="html">Thursday June 2nd is a very sunny day, I have definitely overpacked and overdressed. It must be 20+˚C and I am in ... Edinburgh. I have flown from London the day before. What for? To attend ScotlandJS, courtesy of Codebar and ScotlandJS. I do use JS a lot by day, even though I secretly expand my love and knowledge of Ruby by night. I honestly didn't know what to expect but with a touch of bravado and fake nonchalance, I walked to the Dynamic Earth venue hosting the 2-day event. From an architecture point of view, it's a more than impressive venue. I follow the trail of people gently walking up to the entrance, feeling more and more like on a first day at school. All of a sudden, uncool because on my own, not belonging because reasons, sweaty because of the warmth and my jumper. As I enter, the first thing that catches my eye is the code of conduct: 'no &amp;lt;insertgroup&amp;gt;phobia' repeated over and over and over on a big banner stand. My anxiety recedes. No bully in sight. Smiles everywhere, I feel better already. One of the volunteers welcomes me and hands me a name tag/schedule leaflet all packed in one - clever and efficient. Yellow lanyard for picture consent - why didn't I pick the purple? I walk in, lured by coffee and viennoiseries. I almost don't understand how but I introduce myself to another girl, living and working in Edinburgh, also on her own for these 2 days. So if only for that, thanks because her company was awesome and this was just the start. What a start - Liv Erickson (@misslivirose) from Microsoft tackles VR, the why and the how. It's 9, I am barely awake, yet leaning in, captivated. So much so that, by the end of the talk, I feel like leaving to go play with A-frame. I am wondering how the following speaker will manage to keep my attention levels even half that high. Jem Young (@JemYoung) from Netflix talking about service workers does the trick. Charlotte Spencer (@Charlotteis) does an amazing job at highlighting why opensource needs to be inclusive and pay attention to the language used. They also discuss the importance of naps. Language *is* important. As a non-native speaker (among other quirks), this is spot-on. I even find myself interested in MIDI when discussed by Ruth John (@Rumyra), as passionate and convincing as Kim Crayton (@KimCrayton1) on Overcoming the Challenges of Mentoring. Every 3 talks, we are invited to a break upstairs called 'discussion tracks' to address any further question we have on a given topic. I realise how dedicated and nice these speakers must be. Being (even gently) quizzed by peers is very intense and quite a commitment. Kudos to them. Matthew Podwysocki (@mattpodwysocki) on Async programming and Dan Jenkins (@dan_jenkins) on Getting physical with Web Bluetooth sure know how to use props. Berlin-based Ola Gasidlo (@misprintedtype) gives some very good insight on offline and some of its challenges. Chad (@kitation) ponders on when it's okay to ask about gender and how to do it. I had thought about what to put in the dreaded drop-down but had never actually questioned the validity of the question altogether. James Halliday (@substack) hops on stage with a hat I thought - wrongly probably - a tribute to Jayne from Serenity. He discussed a fairer world by describing his P2P work off the grid. If I have to be honest, I would quit my job and go for strappy sandals and funky hat if I had a project and an experience comparable to his. I was impressed and inspired. Not every part of this planet faces the same technological challenges. Robin Mehner (@rmehner) on Surviving Javascript makes me laugh a lot. I love his approach to coding and his appeal for more humility and inclusion in the community. He also addresses the adopt/know-it-all race. I did share more with Robin on the topic at the after-party on Friday, he also got me almost convinced to move to Berlin. I mean it's a cool city, so it wouldn't take much convincing. Ruth John and Tim Pietrusky (@TimPietrusky) treat all of us to a 'nerd disco' at the end of Day 1. By that point, it gets surreal to be here, having fun with tech and like-minded people. My brain then gets really fuzzy about chronology. I continue to see friendly faces and hear interesting voices talking about HTTP/2, cognitive biases when coding, mining your own data (including some guessing games which I resisted to participate to the HTTP/2 track - that was...hard), accessibility, electron, how big tv screens are mobile screens you can't touch at a 10ft distance, cellular automata and fear. I get fully, entirely, completely starstruck by CJ Silverio (@ceejbot) from npm talking about 'Monitoring on a budget' - my awesomeness sensors are off the charts and I feel like a very very small dev in very very big uber cool pond. The team at ScotlandJS was funny, caring and organised. Everything went seamlessly (or was well hidden, same difference). The talks were as inspiring as content-rich. My personal take-aways: Coding is ultimately about people, welcome/include everyone. Take a breath and a nap and be the best you can be. Don't compete with others, compete with older versions of you. Numbats, wombats and Jedis rock. If I have not yet convinced you to buy your tickets for next year, I just know I will and I truly hope to see you there.</summary></entry><entry><title type="html">Let’s get d…orky</title><link href="http://localhost:4000//hardware/2016/03/15/how-to-asus-zenbook-ux305-dualboot-fedora-23.html" rel="alternate" type="text/html" title="Let's get d...orky" /><published>2016-03-15T13:24:34+00:00</published><updated>2016-03-15T13:24:34+00:00</updated><id>http://localhost:4000//hardware/2016/03/15/how-to-asus-zenbook-ux305-dualboot-fedora-23</id><content type="html" xml:base="http://localhost:4000//hardware/2016/03/15/how-to-asus-zenbook-ux305-dualboot-fedora-23.html">&lt;p&gt;Today, I will publish details about my personal life.&lt;/p&gt;
&lt;p&gt;When my desktop computer sadly passed away June last year, I decided to make the big jump.&lt;br /&gt;
Jump into the land of laptop gamers that is.&lt;br /&gt;
I had never felt the need or wish to before.&lt;br /&gt;
Always thought a desktop left you with the choice to easily upgrade whenever the need arose.&lt;br /&gt;
Except, I &lt;del datetime=&quot;2016-02-25T22:27:26+00:00&quot;&gt;rarely&lt;/del&gt; never got around doing it. Moving to a tiny doubleroom in Central London also made me realize the benefits of owning a laptop.&lt;/p&gt;
&lt;p&gt;I use my computer for various purposes - including gaming which did put a minimum configuration and thus price tag on my buy:&lt;br /&gt;
MSI GT72 2QE (Dominator Pro)-682UK&lt;br /&gt;
Intel® Core™ i7-4720HQ Quad Core Processor&lt;br /&gt;
17.3&quot; Full HD Screen, Microsoft Windows 8.1 64-bit, 16GB DDR3 RAM, 128GB SSD + 1000GB HDD, DVD Rewriter, Dedicated GeForce GTX 980M 4GB Graphics, USB3 | HDMI | Bluetooth | DisplayPort, 2 Year MSI Warranty, 9S7-178131-682&lt;/p&gt;
&lt;p&gt;I weighed the best value and my focus was mainly - along with a nice graphic card and processor - on getting as much SSD and RAM as possible. Just before it hits the mark where it becomes incredibly costly.&lt;/p&gt;
&lt;p&gt;Now, I quickly realized that this 7kg beast of a 'laptop' really is a desktop replacement. As in your laps need to be a desk to feel comfortable about cuddling it.&lt;/p&gt;
&lt;p&gt;Coding on the go was thus a big no no. Trust me, being stubborn, I tried.&lt;/p&gt;
&lt;p&gt;Months later, I also sized down my phablet to a more normal phone.&lt;br /&gt;
All this led me to welcoming a new device into the family (of devices).&lt;/p&gt;
&lt;p&gt;After discussing hardware with work colleagues, my heart - heavily guided by my brain - turned to this alternative to a MacBook Air (cheaper):&lt;br /&gt;
ASUS Zenbook UX305 13.3&quot; Laptop - White&lt;br /&gt;
&lt;img class=&quot;alignnone size-medium wp-image-95&quot; src=&quot;//assets/computer-300x266.jpg&quot; alt=&quot;ASUS Zenbook UX305 13.3&quot; width=&quot;300&quot; height=&quot;266&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here are its specifications:&lt;br /&gt;
Processor: Dual-Core Intel Core M-5Y10c,&lt;br /&gt;
RAM: 8GB, Size: 324x226x12mm,&lt;br /&gt;
Weight: 1.2kg,&lt;br /&gt;
Screen size: 13.3 inches,&lt;br /&gt;
Screen resolution: 1,920x1,080&lt;br /&gt;
Graphics adaptor: Intel HD 5300&lt;br /&gt;
Total storage: 128GB SSD&lt;/p&gt;
&lt;p&gt;It's quick, light, sleek.&lt;br /&gt;
The screen resolution could be better - it is in fact better on later models (3200 x 1800, processor has been upgraded too).&lt;br /&gt;
Quality was enough for my needs.&lt;/p&gt;
&lt;p&gt;Then I thought, 'hold on, I don't want another Windows and I could do with some experience fiddling with a Linux distribution'.&lt;br /&gt;
Yes, for the record, I think like that. S&lt;br /&gt;
omeone said the magic word! DUALBOOT - when you can choose to boot on Windows or Linux.&lt;br /&gt;
I knew what it meant, just never had used it or set it up.&lt;br /&gt;
New==shiny so I tried.&lt;/p&gt;
&lt;p&gt;After that I had to make a choice, between the linux distros out there.&lt;br /&gt;
After discussing the matter with my privy council, I knew I had to choose between Debian and Fedora.&lt;br /&gt;
I went for Fedora (23). My main reasons:&lt;br /&gt;
- they are early adopters&lt;br /&gt;
- my affinity with software/frameworks used by Fedora backer&lt;/p&gt;
&lt;p&gt;I had to get my hands dirty and just move on to install.&lt;br /&gt;
I generally prefer formatting my devices to avoid any unnecessary issue.&lt;br /&gt;
I wiped my usb drive clean and followed the guide below:&lt;br /&gt;
&lt;a href=&quot;https://fedoraproject.org/wiki/How_to_create_and_use_Live_USB#Windows_quick_start_.28direct_write.29&quot;&gt;Windows quick start (direct write)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This method will destroy all data on the USB stick.&lt;br /&gt;
Download a Fedora image, choose a USB stick that does not contain any data you need, and connect it.&lt;br /&gt;
Download and run Rawrite32.&lt;br /&gt;
Choose the Fedora image as the Filesystem image (Rawrite32) - if the image file is not shown, you may have to change the file selector options or change the image's extension.&lt;br /&gt;
Choose the USB stick in the drop-down box as the Target (Rawrite32).&lt;br /&gt;
Double-check you're really, really sure you don't need any of the data on the USB stick!&lt;br /&gt;
Click Write to disk... (Rawrite32).&lt;br /&gt;
Wait for the operation to complete, then reboot your computer.&lt;br /&gt;
Do whatever you need to do to boot from a USB stick - often this will involve pressing or holding down F12, F2 or Del.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;On the ASUS Zenbook UX305 here is what you have to do:&lt;br /&gt;
- restart computer&lt;br /&gt;
- press escape key quickly as computer restarts&lt;br /&gt;
- navigate to Security Tab:&lt;br /&gt;
&lt;img src=&quot;//assets/bios_disable_security-300x178.jpg&quot; alt=&quot;bios_disable_security&quot; width=&quot;300&quot; height=&quot;178&quot; class=&quot;alignnone size-medium wp-image-98&quot; /&gt;&lt;br /&gt;
- then to Secure Boot Menu:&lt;br /&gt;
&lt;img src=&quot;//assets/bios_disable_security_2-300x169.jpg&quot; alt=&quot;bios_disable_security_2&quot; width=&quot;300&quot; height=&quot;169&quot; class=&quot;alignnone size-medium wp-image-97&quot; /&gt;&lt;br /&gt;
Disable this control to enable booting via your usb key.&lt;br /&gt;
This setting is supposed to help protect against rootkits and other malware infecting the boot loader.&lt;/p&gt;
&lt;p&gt;Once the comp boots on the usb where the image has been written, it's a matter of following fedora's instructions and clicking 'Next'.&lt;/p&gt;
&lt;p&gt;Tadam!&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><category term="asus" /><category term="asusux305" /><category term="bios" /><category term="boot" /><category term="distribution" /><category term="fedora23" /><category term="linux" /><summary type="html">Today, I will publish details about my personal life. When my desktop computer sadly passed away June last year, I decided to make the big jump. Jump into the land of laptop gamers that is. I had never felt the need or wish to before. Always thought a desktop left you with the choice to easily upgrade whenever the need arose. Except, I rarely never got around doing it. Moving to a tiny doubleroom in Central London also made me realize the benefits of owning a laptop. I use my computer for various purposes - including gaming which did put a minimum configuration and thus price tag on my buy: MSI GT72 2QE (Dominator Pro)-682UK Intel® Core™ i7-4720HQ Quad Core Processor 17.3&quot; Full HD Screen, Microsoft Windows 8.1 64-bit, 16GB DDR3 RAM, 128GB SSD + 1000GB HDD, DVD Rewriter, Dedicated GeForce GTX 980M 4GB Graphics, USB3 | HDMI | Bluetooth | DisplayPort, 2 Year MSI Warranty, 9S7-178131-682 I weighed the best value and my focus was mainly - along with a nice graphic card and processor - on getting as much SSD and RAM as possible. Just before it hits the mark where it becomes incredibly costly. Now, I quickly realized that this 7kg beast of a 'laptop' really is a desktop replacement. As in your laps need to be a desk to feel comfortable about cuddling it. Coding on the go was thus a big no no. Trust me, being stubborn, I tried. Months later, I also sized down my phablet to a more normal phone. All this led me to welcoming a new device into the family (of devices). After discussing hardware with work colleagues, my heart - heavily guided by my brain - turned to this alternative to a MacBook Air (cheaper): ASUS Zenbook UX305 13.3&quot; Laptop - White Here are its specifications: Processor: Dual-Core Intel Core M-5Y10c, RAM: 8GB, Size: 324x226x12mm, Weight: 1.2kg, Screen size: 13.3 inches, Screen resolution: 1,920x1,080 Graphics adaptor: Intel HD 5300 Total storage: 128GB SSD It's quick, light, sleek. The screen resolution could be better - it is in fact better on later models (3200 x 1800, processor has been upgraded too). Quality was enough for my needs. Then I thought, 'hold on, I don't want another Windows and I could do with some experience fiddling with a Linux distribution'. Yes, for the record, I think like that. S omeone said the magic word! DUALBOOT - when you can choose to boot on Windows or Linux. I knew what it meant, just never had used it or set it up. New==shiny so I tried. After that I had to make a choice, between the linux distros out there. After discussing the matter with my privy council, I knew I had to choose between Debian and Fedora. I went for Fedora (23). My main reasons: - they are early adopters - my affinity with software/frameworks used by Fedora backer I had to get my hands dirty and just move on to install. I generally prefer formatting my devices to avoid any unnecessary issue. I wiped my usb drive clean and followed the guide below: Windows quick start (direct write) This method will destroy all data on the USB stick. Download a Fedora image, choose a USB stick that does not contain any data you need, and connect it. Download and run Rawrite32. Choose the Fedora image as the Filesystem image (Rawrite32) - if the image file is not shown, you may have to change the file selector options or change the image's extension. Choose the USB stick in the drop-down box as the Target (Rawrite32). Double-check you're really, really sure you don't need any of the data on the USB stick! Click Write to disk... (Rawrite32). Wait for the operation to complete, then reboot your computer. Do whatever you need to do to boot from a USB stick - often this will involve pressing or holding down F12, F2 or Del. On the ASUS Zenbook UX305 here is what you have to do: - restart computer - press escape key quickly as computer restarts - navigate to Security Tab: - then to Secure Boot Menu: Disable this control to enable booting via your usb key. This setting is supposed to help protect against rootkits and other malware infecting the boot loader. Once the comp boots on the usb where the image has been written, it's a matter of following fedora's instructions and clicking 'Next'. Tadam!</summary></entry><entry><title type="html">Chomsky-generated headache</title><link href="http://localhost:4000//meta-thinking-beyond/2016/02/16/chomsky-generated-headache.html" rel="alternate" type="text/html" title="Chomsky-generated headache" /><published>2016-02-16T11:55:54+00:00</published><updated>2016-02-16T11:55:54+00:00</updated><id>http://localhost:4000//meta-thinking-beyond/2016/02/16/chomsky-generated-headache</id><content type="html" xml:base="http://localhost:4000//meta-thinking-beyond/2016/02/16/chomsky-generated-headache.html">&lt;p&gt;I recently had a discussion with the VP of engineering at my current company.&lt;br /&gt;
Unsurprisingly, we were gently arguing over learning natural languages vs learning programming languages.&lt;br /&gt;
Over a beer (I thought this is important for setting the context) and a halloumi burger (also important).&lt;/p&gt;
&lt;p&gt;Empirically, I feel the common denominator to most of what I learn is my love for patterns.&lt;/p&gt;
&lt;p&gt;Not that it's important, but here is a non-exhaustive list:&lt;br /&gt;
Social psychology: study of patterns in thoughts, feelings, and behaviors as influenced by the presence of others.&lt;br /&gt;
Puzzle/detective games, books and shows: any games where a mystery has to be solved.&lt;br /&gt;
eg. The Raven - Legacy of a Master Thief, Black Closet, ...&lt;br /&gt;
Detective tabletop RPGs and &lt;a href=&quot;https://en.wikipedia.org/wiki/Murder_mystery_game&quot; target=&quot;_blank&quot;&gt;Murder Mystery game nights&lt;/a&gt;.&lt;br /&gt;
The Sherlock Holmes Canon, etc, etc, etc, you get the idea.&lt;/p&gt;
&lt;p&gt;Now, languages:&lt;br /&gt;
I studied Latin as a child and I knew my interest for it could not have been communication or pleasure in pronunciation - it's a dead language. I realised I liked it because I knew it had a structure which I acknowledged and which helped deconstruct it for translation. I could also deconstruct/parse any word from my native language based on Latin and the shreds of Greek I have acquired over time. Languages are like a puzzle game. Figuring out where things go and what their permissions are (like a three-dimensional chess).&lt;/p&gt;
&lt;p&gt;I could link a zillion articles to the benefits of learning.&lt;br /&gt;
I could link a zillion on top relating to the benefits of learning languages.&lt;br /&gt;
Maybe not a zillion, k.&lt;br /&gt;
&lt;a href=&quot;http://www.theguardian.com/education/2014/sep/04/what-happens-to-the-brain-language-learning&quot; target=&quot;_blank&quot;&gt;Here's one which looks at what happens in your brain.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fast forward to university. One day, I was dozing through a linguistics class when the professor started drawing some strange glyphs on the board.&lt;br /&gt;
&lt;img src=&quot;//assets/2000px-Basic_english_syntax_tree.svg.png&quot; alt=&quot;Generative Grammar&quot; width=&quot;200&quot; height=&quot;223&quot; /&gt;&lt;br /&gt;
And some more - vaguely reminding me of arithmetic and geometric progressions.&lt;br /&gt;
I rubbed my eyes, I was still studying English for sure. I had simply become acquainted with the work of a contemporary genius, namely &lt;a href=&quot;https://en.wikipedia.org/wiki/Noam_Chomsky&quot; target=&quot;_blank&quot;&gt;Noam Chomsky&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What is interesting in this generative grammar theory of his (I am not pretending to be anywhere close to an expert) is how it struck me as a programmatic construct.&lt;br /&gt;
This stayed with me. It triggers a whole lot of questions.&lt;br /&gt;
Are these constructs led by rules born out of human chaos/fancy?&lt;br /&gt;
Or is there something more deterministic based on our context/dependencies (inc. brain capacities, environment, etc)?&lt;br /&gt;
This is more in line with what he looks at in his universal grammar moving towards...&lt;br /&gt;
the last bit of his work - minimalist program. Not grammar, you got that right, PROGRAM.&lt;/p&gt;
&lt;p&gt;Natural language as a system based on economy produced by plastic cerebral circuits.&lt;/p&gt;
&lt;p&gt;I am not saying natural and programming languages are the same but they are related.&lt;br /&gt;
If their similarities help understand the other, it must thereby also help with learning the other.&lt;/p&gt;
&lt;p&gt;For more insight on the topic:&lt;br /&gt;
&lt;a href=&quot;https://www.cs.wmich.edu/~bhardin/cs4850/ChomskyPresentation.pdf&quot; target=&quot;_blank&quot;&gt;A presentation of Chomsky Hierarchy&lt;/a&gt;&lt;br /&gt;
AND&lt;br /&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/vhiiia1_hC4&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;I would love to hear your opinion on the matter, especially as I sense this might be a very simplistic post on a very rich subject.&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><summary type="html">I recently had a discussion with the VP of engineering at my current company. Unsurprisingly, we were gently arguing over learning natural languages vs learning programming languages. Over a beer (I thought this is important for setting the context) and a halloumi burger (also important). Empirically, I feel the common denominator to most of what I learn is my love for patterns. Not that it's important, but here is a non-exhaustive list: Social psychology: study of patterns in thoughts, feelings, and behaviors as influenced by the presence of others. Puzzle/detective games, books and shows: any games where a mystery has to be solved. eg. The Raven - Legacy of a Master Thief, Black Closet, ... Detective tabletop RPGs and Murder Mystery game nights. The Sherlock Holmes Canon, etc, etc, etc, you get the idea. Now, languages: I studied Latin as a child and I knew my interest for it could not have been communication or pleasure in pronunciation - it's a dead language. I realised I liked it because I knew it had a structure which I acknowledged and which helped deconstruct it for translation. I could also deconstruct/parse any word from my native language based on Latin and the shreds of Greek I have acquired over time. Languages are like a puzzle game. Figuring out where things go and what their permissions are (like a three-dimensional chess). I could link a zillion articles to the benefits of learning. I could link a zillion on top relating to the benefits of learning languages. Maybe not a zillion, k. Here's one which looks at what happens in your brain. Fast forward to university. One day, I was dozing through a linguistics class when the professor started drawing some strange glyphs on the board. And some more - vaguely reminding me of arithmetic and geometric progressions. I rubbed my eyes, I was still studying English for sure. I had simply become acquainted with the work of a contemporary genius, namely Noam Chomsky. What is interesting in this generative grammar theory of his (I am not pretending to be anywhere close to an expert) is how it struck me as a programmatic construct. This stayed with me. It triggers a whole lot of questions. Are these constructs led by rules born out of human chaos/fancy? Or is there something more deterministic based on our context/dependencies (inc. brain capacities, environment, etc)? This is more in line with what he looks at in his universal grammar moving towards... the last bit of his work - minimalist program. Not grammar, you got that right, PROGRAM. Natural language as a system based on economy produced by plastic cerebral circuits. I am not saying natural and programming languages are the same but they are related. If their similarities help understand the other, it must thereby also help with learning the other. For more insight on the topic: A presentation of Chomsky Hierarchy AND I would love to hear your opinion on the matter, especially as I sense this might be a very simplistic post on a very rich subject.</summary></entry><entry><title type="html">The missing widget</title><link href="http://localhost:4000//bitsbobsofcodes/2016/02/14/the-missing-widget.html" rel="alternate" type="text/html" title="The missing widget" /><published>2016-02-14T18:51:34+00:00</published><updated>2016-02-14T18:51:34+00:00</updated><id>http://localhost:4000//bitsbobsofcodes/2016/02/14/the-missing-widget</id><content type="html" xml:base="http://localhost:4000//bitsbobsofcodes/2016/02/14/the-missing-widget.html">&lt;p&gt;There I was, scratching my head, trying to figure out what to add as a widget to the dreaded footer.&lt;br /&gt;
The footer ie. a no-man's land where no human has ever &lt;del datetime=&quot;2016-02-14T18:00:07+00:00&quot;&gt;set&lt;/del&gt; scrolled to.&lt;br /&gt;
As per the usual, I turned to my best tech mate aka the Big G. aka Google and there I found some light.&lt;br /&gt;
Goodreads offer a nice widget to display your current reading. Fine. 1 down. 2 to go.&lt;/p&gt;
&lt;p&gt;Because I am &lt;em&gt;slightly&lt;/em&gt; obsessed with &lt;a href=&quot;http://natachasegala.co.uk/?p=3&quot; target=&quot;_blank&quot;&gt;learning natural languages&lt;/a&gt; as well as programming, I thought, heck, let's add a duolingo widget.&lt;br /&gt;
Except - except there is not one. At least, none that I could find on PAGE 1 of my google searches (anything beyond is known as the big un-relevant unknown).&lt;/p&gt;
&lt;p&gt;I found &lt;a href=&quot;https://github.com/KartikTalwar/Duolingo&quot; target=&quot;_blank&quot;&gt;this bit of duolingo-related python on github&lt;/a&gt;.&lt;br /&gt;
And I proceeded to create an app:&lt;br /&gt;
1. First got the json from https://www.duolingo.com/users/&lt;br /&gt;
2. Accessed the response body thanks to the &lt;a href=&quot;https://github.com/jnunemaker/httparty&quot; target=&quot;_blank&quot;&gt;lovely httparty gem&lt;/a&gt;&lt;br /&gt;
3. Once, I had my hash, navigated to the key I was interested in (because the response contains A LOT more than what I needed)&lt;br /&gt;
4. From there, got an array which contained hashes that contained the relevant info - phew, breathe.&lt;br /&gt;
5. Looped through array and selected hash where learning was set to true&lt;br /&gt;
6. Sorted array based on hash with higher value for 'Level'&lt;/p&gt;
&lt;p&gt;I have learned in the process a bit more about iframes than I used to.&lt;br /&gt;
I have also learned that by default, Rails do not allow for iframes.&lt;br /&gt;
More info &lt;a href=&quot;http://edgeguides.rubyonrails.org/security.html#default-headers&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/16561066/ruby-on-rails-4-app-not-works-in-iframe&quot; target=&quot;_blank&quot;&gt;there&lt;/a&gt;.&lt;br /&gt;
I wanted some cross-domain to happen.&lt;br /&gt;
Since this app is a show only without any kind of security involved, I figured it would not hurt to change the default headers to 'ALLOWALL'. Which I did.&lt;/p&gt;
&lt;p&gt;Before creating the app, I created the method, to make sure I could do what I wanted with the response.&lt;br /&gt;
I started yesterday and you can see what kind of time I spent based on my commits.&lt;br /&gt;
I am a bit ashamed to say I struggled to...play with the nested-ry of the whole response more than with the logic to apply- if that makes any kind of sense.&lt;/p&gt;
&lt;pre lang=&quot;LANGUAGE&quot; line=&quot;10&quot;&gt;
  def duolingo
#so this sets variables to be used in the scope (ie. context/frame) of the class (called Widget - all praise my creativity)
#the params[:something] is useful to get parameters from the user's browser when they request the page
#(e.g. &quot;http://www.mysite.com/something=&quot;whattheuserwantstoget&quot;)
  @username = params[:username]
#this below also set a class variable which calls the method init and stores its result
  @content = WidgetController.init(username)
  end

#the thing that makes it work
   def self.init(username=&quot;&quot;)
#if no username is passed in the url, I don't want my app to break so I am making sure something is passed
   		if !username.nil?
#Please httparty get me the info I need from duolingo based on the username passed in url
        response = HTTParty.get('https://www.duolingo.com/users/' + username)
#Parse the body to Json (meaning I also include the json gem in my gemfile)
        json = JSON.parse(response.body)
#get me the value for 'languages' key
        hash = json[&quot;languages&quot;]
#I know it's an array full of hashes (how sick is that?) so loop through the array
        hash = hash.each do |x|
#destructively select any key value pair which key includes
#streak, language_string,points,level, to_next_level, learning ONLY IF value for learning is true
                x.select!{|k,v| k =~ /streak|language_string|points|level|to_next_level|learning/ &amp;&amp; x[&quot;learning&quot;]}
            end
#now now some cleanup, reject any empty hash left from select and sort this array by level descending, ta very much
        hash = hash.reject { |c| c.empty? }.sort_by { |hsh| hsh[&quot;level&quot;] }.reverse!
   		end
       end
#the end!
&lt;/pre&gt;
&lt;p&gt;I wrapped that engine (controller) in a pretty (scss) box (view) and that's it.&lt;br /&gt;
I am able (check the footer, tadam!) to embed the generated/formatted/styled html via an iframe tag.&lt;br /&gt;
It was either that or learning PHP in less than 6h. Errr.&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><summary type="html">There I was, scratching my head, trying to figure out what to add as a widget to the dreaded footer. The footer ie. a no-man's land where no human has ever set scrolled to. As per the usual, I turned to my best tech mate aka the Big G. aka Google and there I found some light. Goodreads offer a nice widget to display your current reading. Fine. 1 down. 2 to go. Because I am slightly obsessed with learning natural languages as well as programming, I thought, heck, let's add a duolingo widget. Except - except there is not one. At least, none that I could find on PAGE 1 of my google searches (anything beyond is known as the big un-relevant unknown). I found this bit of duolingo-related python on github. And I proceeded to create an app: 1. First got the json from https://www.duolingo.com/users/ 2. Accessed the response body thanks to the lovely httparty gem 3. Once, I had my hash, navigated to the key I was interested in (because the response contains A LOT more than what I needed) 4. From there, got an array which contained hashes that contained the relevant info - phew, breathe. 5. Looped through array and selected hash where learning was set to true 6. Sorted array based on hash with higher value for 'Level' I have learned in the process a bit more about iframes than I used to. I have also learned that by default, Rails do not allow for iframes. More info here and there. I wanted some cross-domain to happen. Since this app is a show only without any kind of security involved, I figured it would not hurt to change the default headers to 'ALLOWALL'. Which I did. Before creating the app, I created the method, to make sure I could do what I wanted with the response. I started yesterday and you can see what kind of time I spent based on my commits. I am a bit ashamed to say I struggled to...play with the nested-ry of the whole response more than with the logic to apply- if that makes any kind of sense. def duolingo #so this sets variables to be used in the scope (ie. context/frame) of the class (called Widget - all praise my creativity) #the params[:something] is useful to get parameters from the user's browser when they request the page #(e.g. &quot;http://www.mysite.com/something=&quot;whattheuserwantstoget&quot;) @username = params[:username] #this below also set a class variable which calls the method init and stores its result @content = WidgetController.init(username) end</summary></entry><entry><title type="html">Platforms that changed my brain - Coding and all that</title><link href="http://localhost:4000//meta-thinking-beyond/2016/02/12/the-platforms-that-changed-my-brain-coding-and-all-that.html" rel="alternate" type="text/html" title="Platforms that changed my brain  - Coding and all that" /><published>2016-02-12T15:51:09+00:00</published><updated>2016-02-12T15:51:09+00:00</updated><id>http://localhost:4000//meta-thinking-beyond/2016/02/12/the-platforms-that-changed-my-brain-coding-and-all-that</id><content type="html" xml:base="http://localhost:4000//meta-thinking-beyond/2016/02/12/the-platforms-that-changed-my-brain-coding-and-all-that.html">&lt;p&gt;My days are spent learning. Failing that - craving to learn.&lt;br /&gt;
I do my utmost to learn as much as possible at work.&lt;br /&gt;
When I go home, I either binge on tv shows or go online and learn some more.&lt;br /&gt;
If you want to know why, I will retrofit a link to the post on why I learn so much - learn until I am drained and stressed and sometimes cranky.&lt;/p&gt;
&lt;p&gt;My time is most spent on:&lt;br /&gt;
- &lt;a href=&quot;https://www.duolingo.com/&quot; target=&quot;_blank&quot;&gt;Duolingo&lt;/a&gt; which has &lt;a href=&quot;https://www.ted.com/talks/luis_von_ahn_massive_scale_online_collaboration&quot; target=&quot;_blank&quot;&gt;an awesome Ted Talk associated with&lt;/a&gt;. I giggled quite a lot.&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/luisvonahn?lang=en&quot; target=&quot;_blank&quot;&gt;Luis von Ahn&lt;/a&gt; also worked on &lt;a href=&quot;https://en.wikipedia.org/wiki/CAPTCHA&quot; target=&quot;_blank&quot;&gt;captcha&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/ReCAPTCHA&quot; target=&quot;_blank&quot;&gt;recaptcha&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;- &lt;a href=&quot;https://en.wikipedia.org/wiki/EdX&quot; target=&quot;_blank&quot;&gt;edX&lt;/a&gt; created by no less than the MIT and Harvard University.&lt;br /&gt;
- &lt;a href=&quot;https://www.codecademy.com/&quot; target=&quot;_blank&quot;&gt;codecademy&lt;/a&gt; back when it was really free - which should be camelCase if you think about it!&lt;br /&gt;
- &lt;a href=&quot;https://www.coursera.org/&quot; target=&quot;_blank&quot;&gt;Coursera&lt;/a&gt; which comes with &lt;a href=&quot;https://www.ted.com/talks/daphne_koller_what_we_re_learning_from_online_education&quot; target=&quot;_blank&quot;&gt;a good Ted Talk too&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot;&gt;Stack Overflow&lt;/a&gt; where you'd better be prepared to read 12 pdfs on how to post if you would like not get flamed straight away&lt;br /&gt;
- all the blogs documenting great code along with clear explanations which I stumble upon when I google&lt;br /&gt;
- Wikipedia where I learnt an awful lot about regexes (come on, I am not going to link that)&lt;/p&gt;
&lt;p&gt;Duolingo is a platform that stands out by its purpose, design, apparently simple yet impeccable code.&lt;br /&gt;
I have used every day for the past years and I have never had any reason to complain, only reasons to praise this app whether on web or handheld device.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.duolingo.com/Natacha_Segala&quot; target=&quot;_blank&quot;&gt;Come and join me&lt;/a&gt;!&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><category term="education" /><summary type="html">My days are spent learning. Failing that - craving to learn. I do my utmost to learn as much as possible at work. When I go home, I either binge on tv shows or go online and learn some more. If you want to know why, I will retrofit a link to the post on why I learn so much - learn until I am drained and stressed and sometimes cranky. My time is most spent on: - Duolingo which has an awesome Ted Talk associated with. I giggled quite a lot. Luis von Ahn also worked on captcha and recaptcha - edX created by no less than the MIT and Harvard University. - codecademy back when it was really free - which should be camelCase if you think about it! - Coursera which comes with a good Ted Talk too - Stack Overflow where you'd better be prepared to read 12 pdfs on how to post if you would like not get flamed straight away - all the blogs documenting great code along with clear explanations which I stumble upon when I google - Wikipedia where I learnt an awful lot about regexes (come on, I am not going to link that) Duolingo is a platform that stands out by its purpose, design, apparently simple yet impeccable code. I have used every day for the past years and I have never had any reason to complain, only reasons to praise this app whether on web or handheld device. Come and join me!</summary></entry><entry><title type="html">Hello world! is overrated</title><link href="http://localhost:4000//bitsbobsofcodes/2016/02/06/hello-world.html" rel="alternate" type="text/html" title="Hello world! is overrated" /><published>2016-02-06T14:10:27+00:00</published><updated>2016-02-06T14:10:27+00:00</updated><id>http://localhost:4000//bitsbobsofcodes/2016/02/06/hello-world</id><content type="html" xml:base="http://localhost:4000//bitsbobsofcodes/2016/02/06/hello-world.html">&lt;p&gt;Or so it seems.&lt;/p&gt;
&lt;p&gt;Upon discussing the matter of recruitment, I was advised by a clojure-lover friend of mine to try my logical skills at fizzbuzz.&lt;/p&gt;
&lt;p&gt;Apparently, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fizz_buzz&quot; target=&quot;_blank&quot;&gt;fizzbuzz is quite big here in the UK&lt;/a&gt;.&lt;br /&gt;
High chances it's big in the rest of the world too - it's meant to teach children about division.&lt;br /&gt;
I no longer qualify as a child but I do qualify as someone who has to prove their coding skills.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Write a program that prints the numbers from 1 to 100.&lt;br /&gt;
But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”.&lt;br /&gt;
For numbers which are multiples of both three and five print “FizzBuzz”.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My first attempt was working but unsatisfactory. I googled to find whether there was a more elegant solution and - lo and behold - there was!&lt;br /&gt;
To save you the trouble, here it is in Ruby with a slight modification as I was also playing with arguments passed from the shell.&lt;/p&gt;
&lt;pre lang=&quot;LANGUAGE&quot; line=&quot;1&quot;&gt;#assign an argument passed via shell/terminal/cli to n or by default 100
n = ARGV[0] || 100
#repeat up to nth time
#what you choose via shell/terminal/cli or the default value of 100
#i is a token/dummy value which represents each incremental iteration
#you could call it diplodocus for all it matters
(1..n).each{|i|
#x is what we will print as a result, upon starting, it's blank!
x = ''
#assign string Fizz to x if i is a multiple of 3
x += 'Fizz' if i%3==0
x += 'Buzz' if i%5==0

#if x is not a multiple of 5 or 3 and is thus empty at that point
#just print the iteration instead ie. count
#otherwise print what's been assigned to x(either Fizz or Buzz or FizzBuzz)
puts(x.empty? ? i : x);
}&lt;/pre&gt;
&lt;p&gt;This is not the ultimate solution - just the one that struck me by its simplicity.&lt;br /&gt;
I have added a lot of comments because my post is not necessarily aimed at an expert audience.&lt;br /&gt;
And frankly, I also appreciate when people try to be as clear as possible.&lt;br /&gt;
It really helps understanding.&lt;/p&gt;
&lt;p&gt;One of the principles of Ruby is &lt;em&gt;there's more than one way to do something&lt;/em&gt;.&lt;br /&gt;
It is rich and challenging because the coder has the responsibility for finding out the best way in their given context.&lt;br /&gt;
This implies a good level of creativity and the ability to re-calibrate the way you think to look at the problem from different angles.&lt;/p&gt;
&lt;p&gt;The strange thing is I can sense whenever I am writing some cluttered code.&lt;br /&gt;
I know that from the moment I repeat some patterns, I feel like I have lost the game.&lt;br /&gt;
Looking back at my code snippets, I often have a sense of gratification widely outweighed by frustration. And such a desire to do more and better!&lt;/p&gt;
&lt;p&gt;This blog is one way to explore the reasons behind why I have decided at this point in life to become a full-time developer.&lt;br /&gt;
It's meant to be self-exploratory, possibly witty and most certainly silly at times.&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><category term="education" /><category term="ruby" /><summary type="html">Or so it seems. Upon discussing the matter of recruitment, I was advised by a clojure-lover friend of mine to try my logical skills at fizzbuzz. Apparently, fizzbuzz is quite big here in the UK. High chances it's big in the rest of the world too - it's meant to teach children about division. I no longer qualify as a child but I do qualify as someone who has to prove their coding skills. Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”. My first attempt was working but unsatisfactory. I googled to find whether there was a more elegant solution and - lo and behold - there was! To save you the trouble, here it is in Ruby with a slight modification as I was also playing with arguments passed from the shell. #assign an argument passed via shell/terminal/cli to n or by default 100 n = ARGV[0] || 100 #repeat up to nth time #what you choose via shell/terminal/cli or the default value of 100 #i is a token/dummy value which represents each incremental iteration #you could call it diplodocus for all it matters (1..n).each{|i| #x is what we will print as a result, upon starting, it's blank! x = '' #assign string Fizz to x if i is a multiple of 3 x += 'Fizz' if i%3==0 x += 'Buzz' if i%5==0</summary></entry></feed>