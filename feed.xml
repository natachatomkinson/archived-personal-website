<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://natachasegala.co.uk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://natachasegala.co.uk/" rel="alternate" type="text/html" /><updated>2019-02-04T22:17:47+00:00</updated><id>https://natachasegala.co.uk/feed.xml</id><title type="html">/^1 pat{2}ern 2 hap{2}ines{2}.*/</title><subtitle>Get to know me a little bit better. Javascript using React and Typescript, Ruby using Rails, Elixir with Phoenix. Programming and learning in a broader sense.
</subtitle><entry><title type="html">Typescript, how to create a small library</title><link href="https://natachasegala.co.uk/bitsbobsofcodes/typescript-getting-started-library/" rel="alternate" type="text/html" title="Typescript, how to create a small library" /><published>2017-07-09T00:00:00+01:00</published><updated>2017-07-09T00:00:00+01:00</updated><id>https://natachasegala.co.uk/bitsbobsofcodes/typescript-getting-started-library</id><content type="html" xml:base="https://natachasegala.co.uk/bitsbobsofcodes/typescript-getting-started-library/">&lt;h2 id=&quot;typescript&quot;&gt;Typescript&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;superset of Javascript created by Microsoft&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It offers all of javascript offers and some extra because ultimately typescript compiles to your target Javascript.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;glimpse into the future of ECMAScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can compile features from future versions of ECMAScript into your target JS.&lt;/p&gt;

&lt;p&gt;### Type system&lt;/p&gt;

&lt;p&gt;##### Why add types?&lt;/p&gt;

&lt;p&gt;In short, types make it easier to understand the intention and purpose.
 Making refactoring easier.&lt;/p&gt;

&lt;p&gt;##### Type system:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Optional

Implicit or Explicit

Does not prevent emitting valid JS
so as long as your typescript is legal JS - even if it's not legal typescript - you will get javascript.

Asserts does not cast

There is no type casting: ie no changing an entity of one data type into another, just assertions.
You tell typescript's compiler what to expect. 
Proptypes in React work in a similar way.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="education" /><category term="javascript" /><category term="es6" /><category term="es7" /><summary type="html">Typescript</summary></entry><entry><title type="html">Javascript &amp;amp; ES6 resource guide</title><link href="https://natachasegala.co.uk/bitsbobsofcodes/javascript-es6-101-guide-starting-kit/" rel="alternate" type="text/html" title="Javascript &amp; ES6 resource guide" /><published>2017-07-09T00:00:00+01:00</published><updated>2017-07-09T00:00:00+01:00</updated><id>https://natachasegala.co.uk/bitsbobsofcodes/javascript-es6-101-guide-starting-kit</id><content type="html" xml:base="https://natachasegala.co.uk/bitsbobsofcodes/javascript-es6-101-guide-starting-kit/">&lt;p&gt;As a beginner to Javascript, I had the luck to be provided with similar resources by a caring senior developer.&lt;/p&gt;

&lt;p&gt;The purpose of this post is to give back and offer any new comer to Javascript and/or ES6 resources to help them.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to use&lt;/h2&gt;

&lt;p&gt;The resources have been selected for the scope they cover and clarity they offer. They are not exhaustive.&lt;/p&gt;

&lt;p&gt;If something doesn’t make sense, search, ask, read again. Scaffolding is the best way to learn.&lt;/p&gt;

&lt;p&gt;It’s not about the deep dive without oxygen. Toe dipping is the way to go. And incrementally from there.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/2998152-javascript&quot; target=&quot;_blank&quot;&gt;JavaScript: The Good Parts&lt;/a&gt; succinctly explains what parts of the language you should and should not use.&lt;/p&gt;

&lt;p&gt;It is targeted at experienced JavaScript developers so don’t get stuck on things that don’t make sense at first.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeburst.io/javascript-wtf-is-es6-es8-es-2017-ecmascript-dca859e4821c&quot; target=&quot;_blank&quot;&gt;What ES6 is&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://babeljs.io/docs/en/learn&quot; target=&quot;_blank&quot;&gt;List of ES6 and ES7 features available with Babel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26&quot; target=&quot;_blank&quot;&gt;Explanation of ES6 arrow functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overview of ES6 classes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a&quot; target=&quot;_blank&quot;&gt;How es6 classes really work and how to build your own&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance&quot; target=&quot;_blank&quot;&gt;Demystifying es6 classes and prototypal inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explanation of destructuring in ES6:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/yang-wei/3d35e8692dbc6cc0f98d&quot; target=&quot;_blank&quot;&gt;Gist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/front-end-hacking/spread-operator-and-destructuring-arrays-and-objects-in-javascript-2f5578e1252b&quot; target=&quot;_blank&quot;&gt;Spreading and destructuring arrays and objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; target=&quot;_blank&quot;&gt;Explanation of the ES6 spread operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot; target=&quot;_blank&quot;&gt;Explanation of the ES6 rest operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/js-var-let-or-const-67e51dbb716f&amp;quot;&quot; target=&quot;_blank&quot;&gt;let/const/var explained&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6#modules&quot; target=&quot;_blank&quot;&gt;ES6 Modules&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="education" /><category term="javascript" /><category term="es6" /><summary type="html">As a beginner to Javascript, I had the luck to be provided with similar resources by a caring senior developer.</summary></entry><entry><title type="html">Beginner’s mind map to debugging</title><link href="https://natachasegala.co.uk/bitsbobsofcodes/debugging-mindmap/" rel="alternate" type="text/html" title="Beginner's mind map to debugging" /><published>2017-07-09T00:00:00+01:00</published><updated>2017-07-09T00:00:00+01:00</updated><id>https://natachasegala.co.uk/bitsbobsofcodes/debugging-mindmap</id><content type="html" xml:base="https://natachasegala.co.uk/bitsbobsofcodes/debugging-mindmap/">&lt;p&gt;&lt;img src=&quot;/assets/debugging_mindmap.jpeg&quot; alt=&quot;Debugging Mindmap&quot; width=&quot;1109&quot; height=&quot;305&quot; /&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="education" /><summary type="html"></summary></entry><entry><title type="html">Rails Active Record Cheat Sheet</title><link href="https://natachasegala.co.uk/reading-notes/active-record-cheat-sheet/" rel="alternate" type="text/html" title="Rails Active Record Cheat Sheet" /><published>2017-07-09T00:00:00+01:00</published><updated>2017-07-09T00:00:00+01:00</updated><id>https://natachasegala.co.uk/reading-notes/active-record-cheat-sheet</id><content type="html" xml:base="https://natachasegala.co.uk/reading-notes/active-record-cheat-sheet/">&lt;p&gt;Preamble: Sometimes, the hardest part is to be aware an ideal method exists for your purposes.&lt;/p&gt;

&lt;p&gt;Notes created based on the &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html&quot;&gt;Active Record Query Interface&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Active Record Query interface is an alternative to using raw SQL in order to retrieve records from your database.&lt;/p&gt;

&lt;p&gt;Each will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;convert options to equivalent SQL query&lt;/li&gt;
  &lt;li&gt;use SQL&lt;/li&gt;
  &lt;li&gt;retrieve results&lt;/li&gt;
  &lt;li&gt;convert results to the equivalent ruby object of the appropriate model for every row&lt;/li&gt;
  &lt;li&gt;run after_find then after_initialize callbacks if relevant&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;List of methods:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;structure&lt;/th&gt;
      &lt;th&gt;what to know&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.find(id || [ids])&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;raises an ActiveRecord::RecordNotFound error in case of no record&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;All methods below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;do not raise exceptions&lt;/li&gt;
  &lt;li&gt;if followed by ‘!’, raise an exception&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;structure&lt;/th&gt;
      &lt;th&gt;what to know&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.take(optional n)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;picks one (or n) ‘random’ record from table, returns nil/no exception in case of no record&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.first(optional n) / .last(optional n)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;returns first/last (n) record(s) &lt;br /&gt;default -&amp;gt; ordered by primary key &lt;br /&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;.order(:attribute)&lt;/code&gt; -&amp;gt; ordered by specified attribute &lt;br /&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;default_scope&lt;/code&gt; on model -&amp;gt; ordered by scope on model&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.find_by&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;returns record based on attribute search.&lt;br /&gt; Bonus: can be written &lt;code class=&quot;highlighter-rouge&quot;&gt;.find_by_some_attribute_name&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To perform big queries:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table.all&lt;/code&gt; is very expensive:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;fetch the table in a single pass&lt;/li&gt;
  &lt;li&gt;build a model object per row&lt;/li&gt;
  &lt;li&gt;keep the entire array of model object in memory (depending on the number of records might exceed memory)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2 memory-friendly methods:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;works on model classes and on relations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:batch_size&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:start&lt;/code&gt; (which primary key to start from - inclusive)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:finish&lt;/code&gt; (which primary key to finish with - exclusive)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;structure&lt;/th&gt;
      &lt;th&gt;what to know&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.find_each&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;1. retrieve records in batches&lt;br /&gt;2. yields each one to the block &lt;br /&gt; NB:&lt;br /&gt;If an order is present, the behaviour depends on the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;config.active_record.error_on_ignored_order&lt;/code&gt;.&lt;br /&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentError&lt;/code&gt; is raised.&lt;br /&gt;By default, the order is ignored and a warning issued.&lt;br /&gt;This warning can be overridden with the option &lt;code class=&quot;highlighter-rouge&quot;&gt;:error_on_ignore&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.find_in_batches&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;1. retrieve records in batches&lt;br /&gt;yields batches to the block as an array of models&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;conditions&quot;&gt;CONDITIONS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;structure&lt;/th&gt;
      &lt;th&gt;what to know&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.where&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.where(&quot;attribute = ? AND other_attribute= ?&quot;, params[:param], params[:other_param])&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.where(&quot;attribute &amp;gt;= :attribute AND other_attribute &amp;lt;= :other_attribute&quot;,{attribute: params[:attribute], other_attribute: params[:other_attribute]})&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;conditions can be string, array or hash&lt;br /&gt;Do not use with pure strings =&amp;gt; SQL injection&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;equality&quot;&gt;Equality:&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(attribute: some_value)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;('attribute' =&amp;gt; some_value)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Belongs_to or polymorphic associations can be used:
&lt;code class=&quot;highlighter-rouge&quot;&gt;Table.where(attribute: some_record)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Table.joins(:attribute).where(some_attributes: { other_attribute: record })&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;range&quot;&gt;Range:&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table.where(attribute: some_range_start..some_range_end)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;subset&quot;&gt;Subset:&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table.where(attribute: [somearray])&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;not&quot;&gt;Not:&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table.where.not(somecondition)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;ordering&quot;&gt;ORDERING&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.order(:attribute)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.order(attribute: :desc) or .order(attribute: :asc)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.order(attribute: :asc, other_attribute: :desc)&lt;/code&gt;
etc.&lt;/p&gt;

&lt;p&gt;if using MySQL 5.7.5 and above, on selecting fields from a result set using methods like select, pluck and ids, order method raises ActiveRecord::StatementInvalid  unless the field(s) used in order clause are included in the select list.&lt;/p&gt;

&lt;h3 id=&quot;selecting&quot;&gt;SELECTING&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.select('attribute, other_attribute')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;initialises a model object with only these fields
all other fields from the original model do not exist =&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::MissingAttributeError: missing attribute: &amp;lt;attribute&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.select(:attribute).distinct&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;returns a single record per unique value in a certain field&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.select(:attribute).distinct.distinct(false)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;toggles the constraint&lt;/p&gt;

&lt;h3 id=&quot;limitingoffsetting&quot;&gt;LIMITING/OFFSETTING:&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.limit(number)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;returns limit of records (starting from first by default)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.offset(number)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;starts record retrieval from number&lt;/p&gt;</content><author><name></name></author><category term="education" /><category term="rails" /><category term="active_record" /><summary type="html">Preamble: Sometimes, the hardest part is to be aware an ideal method exists for your purposes.</summary></entry><entry><title type="html">Basic Unix on MacOS</title><link href="https://natachasegala.co.uk/reading-notes/basic-unix-on-mac-%D0%BEs/" rel="alternate" type="text/html" title="Basic Unix on MacOS" /><published>2017-07-09T00:00:00+01:00</published><updated>2017-07-09T00:00:00+01:00</updated><id>https://natachasegala.co.uk/reading-notes/basic-unix-on-mac-%D0%BEs</id><content type="html" xml:base="https://natachasegala.co.uk/reading-notes/basic-unix-on-mac-%D0%BEs/">&lt;p&gt;Edit 2017-09-06:&lt;/p&gt;

&lt;p&gt;If I open my terminal and type:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ alias&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is roughly what I get (minus work-related ones):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;addkeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ssh-add ~/.ssh/pro_key &amp;amp;&amp;amp; ssh-add ~/.ssh/perso_key'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cp -i'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ls -aF'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias mv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mv -i'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias rm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rm -i'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;resizePic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'convert -resize 50%  '&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Additionally here is a summary of my notes of the book ‘Learning Unix for OS X’ by Dave Taylor.&lt;/p&gt;

&lt;p&gt;A directory is just another kind of file&lt;/p&gt;

&lt;p&gt;BASIC COMMANDS&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-asx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to list all programs and processes &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;all &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-ax&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &amp;lt;program&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &amp;lt;search1&amp;gt; &amp;lt;search2&amp;gt; ~ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;copy&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;list all&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-options&lt;/span&gt; &amp;lt;filename&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt;s
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; - Print Working Directory
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man - Manual
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;less - Long Text File
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; - pattern filename
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; - copy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; - move
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;top - Running Applications and Processes
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; - List files and directories
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;open - open file or program with default application&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Exception in order of arguments&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; sort -o 'sortedfilename' -n 'sortmefilename'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Paste escaped text by using ctrl + meta + V (only in Terminal)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;SHORTCUTS&lt;/p&gt;

&lt;p&gt;CTRL + U = Wholeline delete
CTRL + S / CTRL + Q = pause/resume printing of a program executing&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ALIASING&lt;/p&gt;

&lt;p&gt;ls=/bin/ls -af
rm= rm - i
mv= mv -i
cp= cp -i&lt;/p&gt;

&lt;p&gt;-i interactive adds prompt when deleting / overwriting&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ alias -' get all aliases&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;LIST INFORMATION&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ls&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-C sorted down
-x sorted across
-F (appends ‘/’ to directories)
-d shows info about a directory and not its contents
-l more info
-a list all files (including hidden files)
-R recursive&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PERMISSIONS&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;d             | rwx                             | r - x | &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;directory&lt;/td&gt;
      &lt;td&gt;Read Write eXecute&lt;/td&gt;
      &lt;td&gt;read nowrite execute&lt;/td&gt;
      &lt;td&gt;nothing allowed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;owner’s permissions    group permissions&lt;/td&gt;
      &lt;td&gt;other users&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;-
plain file  | …&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;CHANGING&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ chmod&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ie change mode&lt;/p&gt;

&lt;p&gt;o = others
g = group
u = current user
a = all others&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;au &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; removes write permission &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;all others and current user
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;au +w adds write permission &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;all others and current user
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rw &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; removes write permission &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;user and group &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;all files and directories &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;current directory &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;not recursive&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - check this one
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; removes all permissions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;group and others&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ chgrp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ie change group&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ chown&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ie change owner
only available for sudo
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo chown 'owner' 'targetowned'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;FIND&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo find | -name 'stufftolookfor' -print&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;sudo to avoid read permission issues&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;DISPLAY&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ie concatenate
streams content of a file till its end
hard to tell when a file begins and ends
-n = numbers lines
-v = makes all characters printable (not necessarily readable)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ less&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;shows content of file screen by screen&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ less *something.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;displays content of all files matching *something.txt BUT alphabetized (not necessarily in the order you’d wish)
-M shows percentage for file position + filename
-I case insensitive
typing q = quits less view&lt;/p&gt;

&lt;p&gt;less is identical to more program (less offers more options)
LESS=”M”; export LESS&lt;/p&gt;

&lt;p&gt;Without the dash to show percentage and filename by default
/’wordtosearch’ = skips to next occurence of wordtosearch
? ‘wordtosearch’ = skips to previous occurrence of wordtosearch&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;MOVE&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mv *.{jpg|JPG} 'targetdir'&lt;/code&gt;
move in bulk with extension&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;SIZING&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ du 'directoryname'&lt;/code&gt;
-s = summarize
ie
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ du -s *.[^.]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;separate totals for directories and files ignoring current and parent directories
-r = recursive
-h = human readable (in kilobytes, megabytes and gigabytes rather than just in the default kilobytes)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;du&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /Library/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;du&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /Library/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rn&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Will list separate 10 biggest files/directories inside Library (sort by numeric values recursively)&lt;/p&gt;

&lt;p&gt;DISK FREE SPACE
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ df&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-h human readable - precise
-H more human readable -slighly less precise&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;INODES
Block of data chained together&lt;/p&gt;

&lt;p&gt;=’ You can have available space on your disk but if you have a great number of files and run out of inodes this will be unusable&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Applescript:
osascript -e | somecommand&lt;/p&gt;

&lt;p&gt;Applications/Utilities/Script Editor&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;LOGIN SHELL
chsh&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;VI(M)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Mac to Unix&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ m2u macfile unixfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unix to Mac&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$u2m unixfile macfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;for fixing returns&lt;/p&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="education" /><category term="bash" /><summary type="html">Edit 2017-09-06:</summary></entry><entry><title type="html">A Macroscopic Take on Metaprogramming</title><link href="https://natachasegala.co.uk/bitsbobsofcodes/macroscopic-take-on-metaprogramming/" rel="alternate" type="text/html" title="A Macroscopic Take on Metaprogramming" /><published>2017-07-09T00:00:00+01:00</published><updated>2017-07-09T00:00:00+01:00</updated><id>https://natachasegala.co.uk/bitsbobsofcodes/macroscopic-take-on-metaprogramming</id><content type="html" xml:base="https://natachasegala.co.uk/bitsbobsofcodes/macroscopic-take-on-metaprogramming/">&lt;p&gt;&lt;em&gt;Disclaimer: First published on the ForwardFinancing tech blog &lt;a href=&quot;http://tech.forwardfinancing.com/elixir/ruby/javascript/2018/10/05/a-macroscopic-take-on-metaprogramming.html&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are as keen on DIY as I am and equally as helpless, the first time you’re presented with some sort of power tool you may think, “This is scary — how could I possibly use this?”.&lt;/p&gt;

&lt;p&gt;In some respects, metaprogramming can feel just like this.&lt;/p&gt;

&lt;p&gt;If we take a look at Wikipedia’s definition: “Metaprogramming is a programming technique in which computer programs have the ability to treat programs as their data.”&lt;/p&gt;

&lt;p&gt;Another common definition is “writing code that writes code.”&lt;/p&gt;

&lt;p&gt;User data is one of the main unknowns in coding. Everyday code does not necessarily solve unique problems. As developers, we use well-defined conventions and set of functions we are familiar with to process this data and return whatever is defined in the product specifications.&lt;/p&gt;

&lt;p&gt;There should be room for abstraction and generalization and yet, the consensus is to try and avoid metaprogramming as much as possible — especially as it can sometimes compromise readability.&lt;/p&gt;

&lt;p&gt;The prefix “meta” is self-referential which tends to indicate linguistically that metaprogramming encompasses all of programming including “normal” programming. We could think of “normal” programming as our ability to solve unique problems. All of the other kinds of general problems could — in theory — be handled by metaprogramming.&lt;/p&gt;

&lt;p&gt;Getting to know the reflective methods and tools every language we use is a way of refining one’s craft. It also offers a glimpse into and a better understanding of the internals of the language.&lt;/p&gt;

&lt;p&gt;Ruby
When working with Ruby, chances are you will come across the DRY, don’t repeat yourself, paradigm.&lt;/p&gt;

&lt;p&gt;The idea of avoiding duplication seems like a sound one in a more general context too. It will make any refactoring or change easier.&lt;/p&gt;

&lt;p&gt;Not a cure-all but definitely a tool to keep handy in one’s dev belt.&lt;/p&gt;

&lt;p&gt;Example
We have a test suite responsible for checking that the index page of our website includes the content we expect:&lt;/p&gt;

&lt;p&gt;class IndexTest &amp;lt; TestCase
  test_homepage_has_about_content do
    visit ‘/’
    assert page.has_content?(about)
  end&lt;/p&gt;

&lt;p&gt;test_homepage_has_news_content do
    visit ‘/’
    assert page.has_content?(news)
  end&lt;/p&gt;

&lt;p&gt;…
end
A quick online search or pairing could reduce the code to:&lt;/p&gt;

&lt;p&gt;class IndexTest &amp;lt; TestCase
  HOMEPAGE_CONTENT = [‘About’, ‘Meetups’, ‘Tweets’, ‘News’].freeze&lt;/p&gt;

&lt;p&gt;HOMEPAGE_CONTENT.each do |content|
    define_method(“test_homepage_has_#{content}_content”) do
      visit ‘/’
      assert page.has_content?(content)
    end
  end
end
What does define_method do exactly and where does it come from?&lt;/p&gt;

&lt;p&gt;Running IndexTest.methods returns a lot of methods we have not defined ourselves. This is where the concept of inheritance starts to be visible.&lt;/p&gt;

&lt;p&gt;This call returns a list that includes all of the methods accessible in the object’s ancestors.&lt;/p&gt;

&lt;p&gt;If we want to know how many ancestors the IndexTest class has, we can run:&lt;/p&gt;

&lt;p&gt;IndexTest.ancestors
=&amp;gt; [IndexTest, Object, Kernel, BasicObject]
If you check each ancestor individually, define_method or even ancestors are nowhere to be found.&lt;/p&gt;

&lt;p&gt;This is because inheritance is not limited to direct “vertical” precedence. BasicObject, Object, and IndexText are all classes and they have Class as their class. All of them are instances of Class. Class ancestors are:&lt;/p&gt;

&lt;p&gt;Class.ancestors
=&amp;gt; [Class, Module, Object, Kernel, BasicObject]
Module is where define_methods and ancestors are defined.&lt;/p&gt;

&lt;p&gt;define_method allows us to pass an argument and dynamically constructs a method based on the latter. The do keyword gives away the fact that — unlike def — the body of the method is a block.&lt;/p&gt;

&lt;p&gt;This means that define_method creates a closure which is both convenient and potentially cumbersome. If its scope includes large objects, we may want to avoid it altogether. It all depends whether we need to make use of the surrounding environment.&lt;/p&gt;

&lt;p&gt;Understanding inheritance in Ruby is key to using the language better.&lt;/p&gt;

&lt;p&gt;A lot of Ruby’s so-called “magic” exists in fact due to metaprogramming.&lt;/p&gt;

&lt;p&gt;JavaScript
ES6 has introduced a new feature called Proxy – which lo and behold – is an application of the proxy pattern&lt;/p&gt;

&lt;p&gt;In short, it acts as an interface to either just forward to the original recipient or apply additional logic.&lt;/p&gt;

&lt;p&gt;Example
We’re writing a library to use with our frontend applications. It will offer functions to report a set of events to a couple of external APIs. These APIs are in turn responsible for dispatching these to our internal messaging systems.&lt;/p&gt;

&lt;p&gt;We have an object responsible for dispatching the event to the first external API.&lt;/p&gt;

&lt;p&gt;import externalApi from ‘external-api’;
let isInitialized;&lt;/p&gt;

&lt;p&gt;const FirstExternalApi = {
  _getDispatcher: () =&amp;gt; {
  return (method, …args) =&amp;gt; {
  return externalApi.push([ method, …args]);
};
},&lt;/p&gt;

&lt;p&gt;dispatch: function(event) {
  if (isInitialized) {
    const { dispatchMethodName } = event;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this[dispatchMethodName](event);   } },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;_dispatchEvent: function({ method, eventAttributes={ } }) {
  this._getDispatcher()(method, eventAttributes);
},&lt;/p&gt;

&lt;p&gt;_dispatchException: function({eventAttributes}) {
  this._dispatchEvent({ method: ‘SHOUT’, eventAttributes });
},&lt;/p&gt;

&lt;p&gt;[…]
}
In a development or staging environment, we want to be able to view the output of _getDispatcher in real time. We think it would avoid context switching and help speed up things a bit.&lt;/p&gt;

&lt;p&gt;We implement a mock object to output the event to the console. We deep clone the FirstExternalApi object and set the _getDispatcher to output to the console.&lt;/p&gt;

&lt;p&gt;function clone() {
 // deep clone logic
}&lt;/p&gt;

&lt;p&gt;const FirstExternalApiMock = clone(FirstExternalApi);&lt;/p&gt;

&lt;p&gt;FirstExternalApiMock._getDispatcher = function() {
  return (method, …args) =&amp;gt; {
    const argsString = args.map(arg =&amp;gt; {
      return JSON.stringify(arg, null, 4);
  }).join(‘, ‘);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(`externalApi('${method}', ${argsString})`);   }; }; Based on the node environment, we have an object responsible for trickling our events down to:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;either the real FirstExternalApi object responsible for communicating with the external API
or the mock object
Another way to look at this problem would be to wonder if we could hijack this _getDispatcher function and mock it directly at the “source”.&lt;/p&gt;

&lt;p&gt;ES6 proxies allow just that. They offer a way to catch just what you need of the behavior or add to it.&lt;/p&gt;

&lt;p&gt;So in our example, we replace the mock with the following:&lt;/p&gt;

&lt;p&gt;const FirstExternalApiMock = new Proxy(FirstExternalApi, {
  get(target, propKey) {
    if (propKey === ‘_getDispatcher’) {
      return () =&amp;gt; {
        return (method, …args)=&amp;gt; {
          const argsString = args.map(arg =&amp;gt; {
            return JSON.stringify(arg, null, 4);
        }).join(‘, ‘);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      console.log(`externalApi: ('${argsString}')`);
    }
  };
} else {
  return target[propKey];
}   } }); We pass the object we are interested in. “get” is responsible for “listening” to whenever a property of this object is called. Now we leave all properties but one alone and focus entirely on “trapping” _getDispatcher. When it’s called, we output the arguments to the console.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a different, slightly more concise more way of implementing our solution.&lt;/p&gt;

&lt;p&gt;Elixir
In Elixir, most of the metaprogramming boils down to understanding the functions quote and unquote (by no means a measure of simplicity). quote effectively gives us access to Elixir’s AST (abstract syntax tree) by showing us how an expression is parsed and transformed into a tree that Elixir can handle. What is returned typically contains three-element tuples (operation/data type, metadata, arguments/data).&lt;/p&gt;

&lt;p&gt;Example
Again, we would like to make our test suite a bit more concise. Our application offers two endpoints with a very similar set of functionality. This should be a good case for abstracting most of their testing and sharing the tests between the two endpoints (endpoint_a and endpoint_b). Not dissimilar to RSpec shared example feature, making use of a domain specific language would work for our purposes.&lt;/p&gt;

&lt;p&gt;We have a series of tests like the one below:&lt;/p&gt;

&lt;p&gt;defmodule Api.V1.AControllerTest do
	test “#create http returns a 403 status with json error” do
	  “/v1/endpoint_a”
	  |&amp;gt; create_record(403, ssl_error())
	end
end&lt;/p&gt;

&lt;p&gt;defmodule Api.V1.BControllerTest do
	test “#create http returns a 403 status with json error” do
	  “/v1/endpoint_b”
	  |&amp;gt; create_record(403, ssl_error())
	end
end&lt;/p&gt;

&lt;p&gt;The only difference being the endpoint, we can abstract this to:&lt;/p&gt;

&lt;p&gt;defmodule SharedTestCase do
  use ExUnit.Case&lt;/p&gt;

&lt;p&gt;@moduletag endpoint: “endpoint_a”&lt;/p&gt;

&lt;p&gt;test “#create http returns a 403 status with json error” do
  		“/v1/#{endpoint}”
  		|&amp;gt; create_record(403, ssl_error())
	end
end
@moduletag is a module attribute provided by ExUnit: one of its uses being to act as a temporary module storage to be used during compilation.&lt;/p&gt;

&lt;p&gt;A macro is going to help Api.V1.AControllerTest and Api.V1.BControllerTest modules make use of the SharedTestCase module.&lt;/p&gt;

&lt;p&gt;defmodule SharedTestCase do
  defmacro &lt;strong&gt;using&lt;/strong&gt;(options) do
    quote do
      use ExUnit.Case&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @moduletag unquote(options)

  test &quot;#create http returns a 403 status with json error&quot;, %{endpoint: endpoint} do
    &quot;/v1/#{endpoint}&quot;
    |&amp;gt; create_record(403, ssl_error())
  end

  ...
end   end end It’s possible to go even further by extracting all the tests to another macro to define the tests separately.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Metaprogramming is not a bag of tricks, it’s the path to a deeper understanding of any language and potentially more expressive code.&lt;/p&gt;

&lt;p&gt;Languages like Elixir give the ability to the programmer of making extensions tailored to their needs which are first-class features.&lt;/p&gt;

&lt;p&gt;It’s too good an opportunity to pass up and not use for the greater good of generalization, DRY-ing your codebase and making the code more expressive.&lt;/p&gt;

&lt;p&gt;If this seems daunting at first, chances are you’re like me. This means one can start from a long redundant looking piece of code they have just written, feel an urge to make it better, and little by little, abstract away as much as possible.&lt;/p&gt;

&lt;p&gt;If this doesn’t seem daunting, it should simply lead to think more and code less.&lt;/p&gt;</content><author><name></name></author><category term="education" /><category term="javascript" /><category term="elixir" /><category term="ruby" /><category term="es6" /><summary type="html">Disclaimer: First published on the ForwardFinancing tech blog here.</summary></entry><entry><title type="html">ScotlandJS 2016</title><link href="https://natachasegala.co.uk/techietalkie/scotlandjs-2016/" rel="alternate" type="text/html" title="ScotlandJS 2016" /><published>2016-06-09T15:27:37+01:00</published><updated>2016-06-09T15:27:37+01:00</updated><id>https://natachasegala.co.uk/techietalkie/scotlandjs-2016</id><content type="html" xml:base="https://natachasegala.co.uk/techietalkie/scotlandjs-2016/">&lt;p&gt;Thursday June 2nd is a very sunny day, I have definitely overpacked and overdressed. It must be 20+˚C and I am in ... Edinburgh.&lt;br /&gt;
I have flown from London the day before.&lt;br /&gt;
What for? To attend &lt;a href=&quot;http://scotlandjs.com/&quot;&gt;ScotlandJS&lt;/a&gt;, courtesy of Codebar and ScotlandJS.&lt;br /&gt;
I do use JS a lot by day, even though I secretly expand my love and knowledge of Ruby by night. I honestly didn't know what to expect but with a touch of bravado and fake nonchalance, I walked to the Dynamic Earth venue hosting the 2-day event.&lt;br /&gt;
From an architecture point of view, it's a more than impressive venue. I follow the trail of people gently walking up to the entrance, feeling more and more like on a first day at school.&lt;br /&gt;
All of a sudden, uncool because on my own, not belonging because reasons, sweaty because of the warmth and my jumper. As I enter, the first thing that catches my eye is the code of conduct: 'no &amp;lt;insertgroup&amp;gt;phobia' repeated over and over and over on a big banner stand. My anxiety recedes. No bully in sight. Smiles everywhere, I feel better already. One of the volunteers welcomes me and hands me a name tag/schedule leaflet all packed in one - clever and efficient. Yellow lanyard for picture consent - why didn't I pick the purple?&lt;/p&gt;
&lt;p&gt;I walk in, lured by coffee and viennoiseries. I almost don't understand how but I introduce myself to another girl, living and working in Edinburgh, also on her own for these 2 days. So if only for that, thanks because her company was awesome and this was just the start.&lt;br /&gt;
What a start - &lt;a href=&quot;https://twitter.com/misslivirose&quot;&gt;Liv Erickson&lt;/a&gt; (@misslivirose) from Microsoft tackles VR, the why and the how. It's 9, I am barely awake, yet leaning in, captivated. So much so that, by the end of the talk, I feel like leaving to go play with &lt;a href=&quot;https://aframe.io/&quot;&gt;A-frame&lt;/a&gt;.&lt;br /&gt;
I am wondering how the following speaker will manage to keep my attention levels even half that high. &lt;a href=&quot;https://twitter.com/jemyoung&quot;&gt;Jem Young&lt;/a&gt; (@JemYoung) from Netflix talking about service workers does the trick. &lt;a href=&quot;https://twitter.com/Charlotteis&quot;&gt;Charlotte Spencer&lt;/a&gt; (@Charlotteis) does an amazing job at highlighting why opensource needs to be inclusive and pay attention to the language used. They also discuss the importance of naps. Language *is* important. As a non-native speaker (among other quirks), this is spot-on. I even find myself interested in MIDI when discussed by &lt;a href=&quot;https://twitter.com/Rumyra&quot;&gt;Ruth John&lt;/a&gt; (@Rumyra), as passionate and convincing as &lt;a href=&quot;https://twitter.com/KimCrayton1&quot;&gt;Kim Crayton&lt;/a&gt; (@KimCrayton1) on Overcoming the Challenges of Mentoring. Every 3 talks, we are invited to a break upstairs called 'discussion tracks' to address any further question we have on a given topic. I realise how dedicated and nice these speakers must be. Being (even gently) quizzed by peers is very intense and quite a commitment. Kudos to them.&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/mattpodwysocki&quot;&gt;Matthew Podwysocki&lt;/a&gt; (@mattpodwysocki) on Async programming and &lt;a href=&quot;https://twitter.com/dan_jenkins&quot;&gt;Dan Jenkins&lt;/a&gt; (@dan_jenkins) on Getting physical with Web Bluetooth sure know how to use props. Berlin-based &lt;a href=&quot;https://twitter.com/misprintedtype&quot;&gt;Ola Gasidlo&lt;/a&gt; (@misprintedtype) gives some very good insight on offline and some of its challenges. &lt;a href=&quot;https://twitter.com/kitation&quot;&gt;Chad&lt;/a&gt; (@kitation) ponders on when it's okay to ask about gender and how to do it. I had thought about what to put in the dreaded drop-down but had never actually questioned the validity of the question altogether. &lt;a href=&quot;https://twitter.com/substack&quot;&gt;James Halliday&lt;/a&gt; (@substack) hops on stage with a hat I thought - wrongly probably - a tribute to Jayne from Serenity. He discussed a fairer world by describing his P2P work off the grid. If I have to be honest, I would quit my job and go for strappy sandals and funky hat if I had a project and an experience comparable to his. I was impressed and inspired. Not every part of this planet faces the same technological challenges.&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/rmehner&quot;&gt;Robin Mehner&lt;/a&gt; (@rmehner) on Surviving Javascript makes me laugh a lot. I love his approach to coding and his appeal for more humility and inclusion in the community. He also addresses the adopt/know-it-all race. I did share more with Robin on the topic at the after-party on Friday, he also got me almost convinced to move to Berlin. I mean it's a cool city, so it wouldn't take much convincing.&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/Rumyra&quot;&gt;Ruth John&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/TimPietrusky&quot;&gt;Tim Pietrusky&lt;/a&gt; (@TimPietrusky) treat all of us to a 'nerd disco' at the end of Day 1. By that point, it gets surreal to be here, having fun with tech and like-minded people.&lt;br /&gt;
My brain then gets really fuzzy about chronology. I continue to see friendly faces and hear interesting voices talking about HTTP/2, cognitive biases when coding, mining your own data (including some guessing games which I resisted to participate to the HTTP/2 track - that was...hard), accessibility, electron, how big tv screens are mobile screens you can't touch at a 10ft distance, cellular automata and fear.&lt;br /&gt;
I get fully, entirely, completely starstruck by &lt;a href=&quot;https://twitter.com/ceejbot&quot;&gt;CJ Silverio&lt;/a&gt; (@ceejbot) from npm talking about 'Monitoring on a budget' - my awesomeness sensors are off the charts and I feel like a very very small dev in very very big uber cool pond.&lt;/p&gt;
&lt;p&gt;The team at ScotlandJS was funny, caring and organised. Everything went seamlessly (or was well hidden, same difference). The talks were as inspiring as content-rich.&lt;/p&gt;
&lt;p&gt;My personal take-aways:&lt;br /&gt;
Coding is ultimately about people, welcome/include everyone.&lt;br /&gt;
Take a breath and a nap and be the best you can be. Don't compete with others, compete with older versions of you.&lt;br /&gt;
Numbats, wombats and Jedis rock.&lt;/p&gt;
&lt;p&gt;If I have not yet convinced you to buy your tickets for next year, I just know I will and I truly hope to see you there.&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><category term="conference" /><category term="javascript" /><category term="js" /><category term="scotland" /><category term="VR" /><summary type="html">Thursday June 2nd is a very sunny day, I have definitely overpacked and overdressed. It must be 20+˚C and I am in ... Edinburgh. I have flown from London the day before. What for? To attend ScotlandJS, courtesy of Codebar and ScotlandJS. I do use JS a lot by day, even though I secretly expand my love and knowledge of Ruby by night. I honestly didn't know what to expect but with a touch of bravado and fake nonchalance, I walked to the Dynamic Earth venue hosting the 2-day event. From an architecture point of view, it's a more than impressive venue. I follow the trail of people gently walking up to the entrance, feeling more and more like on a first day at school. All of a sudden, uncool because on my own, not belonging because reasons, sweaty because of the warmth and my jumper. As I enter, the first thing that catches my eye is the code of conduct: 'no &amp;lt;insertgroup&amp;gt;phobia' repeated over and over and over on a big banner stand. My anxiety recedes. No bully in sight. Smiles everywhere, I feel better already. One of the volunteers welcomes me and hands me a name tag/schedule leaflet all packed in one - clever and efficient. Yellow lanyard for picture consent - why didn't I pick the purple? I walk in, lured by coffee and viennoiseries. I almost don't understand how but I introduce myself to another girl, living and working in Edinburgh, also on her own for these 2 days. So if only for that, thanks because her company was awesome and this was just the start. What a start - Liv Erickson (@misslivirose) from Microsoft tackles VR, the why and the how. It's 9, I am barely awake, yet leaning in, captivated. So much so that, by the end of the talk, I feel like leaving to go play with A-frame. I am wondering how the following speaker will manage to keep my attention levels even half that high. Jem Young (@JemYoung) from Netflix talking about service workers does the trick. Charlotte Spencer (@Charlotteis) does an amazing job at highlighting why opensource needs to be inclusive and pay attention to the language used. They also discuss the importance of naps. Language *is* important. As a non-native speaker (among other quirks), this is spot-on. I even find myself interested in MIDI when discussed by Ruth John (@Rumyra), as passionate and convincing as Kim Crayton (@KimCrayton1) on Overcoming the Challenges of Mentoring. Every 3 talks, we are invited to a break upstairs called 'discussion tracks' to address any further question we have on a given topic. I realise how dedicated and nice these speakers must be. Being (even gently) quizzed by peers is very intense and quite a commitment. Kudos to them. Matthew Podwysocki (@mattpodwysocki) on Async programming and Dan Jenkins (@dan_jenkins) on Getting physical with Web Bluetooth sure know how to use props. Berlin-based Ola Gasidlo (@misprintedtype) gives some very good insight on offline and some of its challenges. Chad (@kitation) ponders on when it's okay to ask about gender and how to do it. I had thought about what to put in the dreaded drop-down but had never actually questioned the validity of the question altogether. James Halliday (@substack) hops on stage with a hat I thought - wrongly probably - a tribute to Jayne from Serenity. He discussed a fairer world by describing his P2P work off the grid. If I have to be honest, I would quit my job and go for strappy sandals and funky hat if I had a project and an experience comparable to his. I was impressed and inspired. Not every part of this planet faces the same technological challenges. Robin Mehner (@rmehner) on Surviving Javascript makes me laugh a lot. I love his approach to coding and his appeal for more humility and inclusion in the community. He also addresses the adopt/know-it-all race. I did share more with Robin on the topic at the after-party on Friday, he also got me almost convinced to move to Berlin. I mean it's a cool city, so it wouldn't take much convincing. Ruth John and Tim Pietrusky (@TimPietrusky) treat all of us to a 'nerd disco' at the end of Day 1. By that point, it gets surreal to be here, having fun with tech and like-minded people. My brain then gets really fuzzy about chronology. I continue to see friendly faces and hear interesting voices talking about HTTP/2, cognitive biases when coding, mining your own data (including some guessing games which I resisted to participate to the HTTP/2 track - that was...hard), accessibility, electron, how big tv screens are mobile screens you can't touch at a 10ft distance, cellular automata and fear. I get fully, entirely, completely starstruck by CJ Silverio (@ceejbot) from npm talking about 'Monitoring on a budget' - my awesomeness sensors are off the charts and I feel like a very very small dev in very very big uber cool pond. The team at ScotlandJS was funny, caring and organised. Everything went seamlessly (or was well hidden, same difference). The talks were as inspiring as content-rich. My personal take-aways: Coding is ultimately about people, welcome/include everyone. Take a breath and a nap and be the best you can be. Don't compete with others, compete with older versions of you. Numbats, wombats and Jedis rock. If I have not yet convinced you to buy your tickets for next year, I just know I will and I truly hope to see you there.</summary></entry><entry><title type="html">Fedora/Windows</title><link href="https://natachasegala.co.uk/hardware/how-to-asus-zenbook-ux305-dualboot-fedora-23/" rel="alternate" type="text/html" title="Fedora/Windows" /><published>2016-03-15T13:24:34+00:00</published><updated>2016-03-15T13:24:34+00:00</updated><id>https://natachasegala.co.uk/hardware/how-to-asus-zenbook-ux305-dualboot-fedora-23</id><content type="html" xml:base="https://natachasegala.co.uk/hardware/how-to-asus-zenbook-ux305-dualboot-fedora-23/">&lt;p&gt;Today, I will publish details about my personal life.&lt;/p&gt;
&lt;p&gt;When my desktop computer sadly passed away June last year, I decided to make the big jump.&lt;br /&gt;
Jump into the land of laptop gamers that is.&lt;br /&gt;
I had never felt the need or wish to before.&lt;br /&gt;
Always thought a desktop left you with the choice to easily upgrade whenever the need arose.&lt;br /&gt;
Except, I &lt;del datetime=&quot;2016-02-25T22:27:26+00:00&quot;&gt;rarely&lt;/del&gt; never got around doing it. Moving to a tiny doubleroom in Central London also made me realize the benefits of owning a laptop.&lt;/p&gt;
&lt;p&gt;I use my computer for various purposes - including gaming which did put a minimum configuration and thus price tag on my buy:&lt;br /&gt;
MSI GT72 2QE (Dominator Pro)-682UK&lt;br /&gt;
Intel® Core™ i7-4720HQ Quad Core Processor&lt;br /&gt;
17.3&quot; Full HD Screen, Microsoft Windows 8.1 64-bit, 16GB DDR3 RAM, 128GB SSD + 1000GB HDD, DVD Rewriter, Dedicated GeForce GTX 980M 4GB Graphics, USB3 | HDMI | Bluetooth | DisplayPort, 2 Year MSI Warranty, 9S7-178131-682&lt;/p&gt;
&lt;p&gt;I weighed the best value and my focus was mainly - along with a nice graphic card and processor - on getting as much SSD and RAM as possible. Just before it hits the mark where it becomes incredibly costly.&lt;/p&gt;
&lt;p&gt;Now, I quickly realized that this 7kg beast of a 'laptop' really is a desktop replacement. As in your laps need to be a desk to feel comfortable about cuddling it.&lt;/p&gt;
&lt;p&gt;Coding on the go was thus a big no no. Trust me, being stubborn, I tried.&lt;/p&gt;
&lt;p&gt;Months later, I also sized down my phablet to a more normal phone.&lt;br /&gt;
All this led me to welcoming a new device into the family (of devices).&lt;/p&gt;
&lt;p&gt;After discussing hardware with work colleagues, my heart - heavily guided by my brain - turned to this alternative to a MacBook Air (cheaper):&lt;br /&gt;
ASUS Zenbook UX305 13.3&quot; Laptop - White&lt;br /&gt;
&lt;img class=&quot;alignnone size-medium wp-image-95&quot; src=&quot;/assets/computer-300x266.jpg&quot; alt=&quot;ASUS Zenbook UX305 13.3&quot; width=&quot;300&quot; height=&quot;266&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here are its specifications:&lt;br /&gt;
Processor: Dual-Core Intel Core M-5Y10c,&lt;br /&gt;
RAM: 8GB, Size: 324x226x12mm,&lt;br /&gt;
Weight: 1.2kg,&lt;br /&gt;
Screen size: 13.3 inches,&lt;br /&gt;
Screen resolution: 1,920x1,080&lt;br /&gt;
Graphics adaptor: Intel HD 5300&lt;br /&gt;
Total storage: 128GB SSD&lt;/p&gt;
&lt;p&gt;It's quick, light, sleek.&lt;br /&gt;
The screen resolution could be better - it is in fact better on later models (3200 x 1800, processor has been upgraded too).&lt;br /&gt;
Quality was enough for my needs.&lt;/p&gt;
&lt;p&gt;Then I thought, 'hold on, I don't want another Windows and I could do with some experience fiddling with a Linux distribution'.&lt;br /&gt;
Yes, for the record, I think like that. S&lt;br /&gt;
omeone said the magic word! DUALBOOT - when you can choose to boot on Windows or Linux.&lt;br /&gt;
I knew what it meant, just never had used it or set it up.&lt;br /&gt;
New==shiny so I tried.&lt;/p&gt;
&lt;p&gt;After that I had to make a choice, between the linux distros out there.&lt;br /&gt;
After discussing the matter with my privy council, I knew I had to choose between Debian and Fedora.&lt;br /&gt;
I went for Fedora (23). My main reasons:&lt;br /&gt;
- they are early adopters&lt;br /&gt;
- my affinity with software/frameworks used by Fedora backer&lt;/p&gt;
&lt;p&gt;I had to get my hands dirty and just move on to install.&lt;br /&gt;
I generally prefer formatting my devices to avoid any unnecessary issue.&lt;br /&gt;
I wiped my usb drive clean and followed the guide below:&lt;br /&gt;
&lt;a href=&quot;https://fedoraproject.org/wiki/How_to_create_and_use_Live_USB#Windows_quick_start_.28direct_write.29&quot;&gt;Windows quick start (direct write)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This method will destroy all data on the USB stick.&lt;br /&gt;
Download a Fedora image, choose a USB stick that does not contain any data you need, and connect it.&lt;br /&gt;
Download and run Rawrite32.&lt;br /&gt;
Choose the Fedora image as the Filesystem image (Rawrite32) - if the image file is not shown, you may have to change the file selector options or change the image's extension.&lt;br /&gt;
Choose the USB stick in the drop-down box as the Target (Rawrite32).&lt;br /&gt;
Double-check you're really, really sure you don't need any of the data on the USB stick!&lt;br /&gt;
Click Write to disk... (Rawrite32).&lt;br /&gt;
Wait for the operation to complete, then reboot your computer.&lt;br /&gt;
Do whatever you need to do to boot from a USB stick - often this will involve pressing or holding down F12, F2 or Del.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;On the ASUS Zenbook UX305 here is what you have to do:&lt;br /&gt;
- restart computer&lt;br /&gt;
- press escape key quickly as computer restarts&lt;br /&gt;
- navigate to Security Tab:&lt;br /&gt;
&lt;img src=&quot;/assets/bios_disable_security-300x178.jpg&quot; alt=&quot;bios_disable_security&quot; width=&quot;300&quot; height=&quot;178&quot; class=&quot;alignnone size-medium wp-image-98&quot; /&gt;&lt;br /&gt;
- then to Secure Boot Menu:&lt;br /&gt;
&lt;img src=&quot;/assets/bios_disable_security_2-300x169.jpg&quot; alt=&quot;bios_disable_security_2&quot; width=&quot;300&quot; height=&quot;169&quot; class=&quot;alignnone size-medium wp-image-97&quot; /&gt;&lt;br /&gt;
Disable this control to enable booting via your usb key.&lt;br /&gt;
This setting is supposed to help protect against rootkits and other malware infecting the boot loader.&lt;/p&gt;
&lt;p&gt;Once the comp boots on the usb where the image has been written, it's a matter of following fedora's instructions and clicking 'Next'.&lt;/p&gt;
&lt;p&gt;Tadam!&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><category term="asus" /><category term="asusux305" /><category term="bios" /><category term="boot" /><category term="distribution" /><category term="fedora23" /><category term="linux" /><summary type="html">Today, I will publish details about my personal life. When my desktop computer sadly passed away June last year, I decided to make the big jump. Jump into the land of laptop gamers that is. I had never felt the need or wish to before. Always thought a desktop left you with the choice to easily upgrade whenever the need arose. Except, I rarely never got around doing it. Moving to a tiny doubleroom in Central London also made me realize the benefits of owning a laptop. I use my computer for various purposes - including gaming which did put a minimum configuration and thus price tag on my buy: MSI GT72 2QE (Dominator Pro)-682UK Intel® Core™ i7-4720HQ Quad Core Processor 17.3&quot; Full HD Screen, Microsoft Windows 8.1 64-bit, 16GB DDR3 RAM, 128GB SSD + 1000GB HDD, DVD Rewriter, Dedicated GeForce GTX 980M 4GB Graphics, USB3 | HDMI | Bluetooth | DisplayPort, 2 Year MSI Warranty, 9S7-178131-682 I weighed the best value and my focus was mainly - along with a nice graphic card and processor - on getting as much SSD and RAM as possible. Just before it hits the mark where it becomes incredibly costly. Now, I quickly realized that this 7kg beast of a 'laptop' really is a desktop replacement. As in your laps need to be a desk to feel comfortable about cuddling it. Coding on the go was thus a big no no. Trust me, being stubborn, I tried. Months later, I also sized down my phablet to a more normal phone. All this led me to welcoming a new device into the family (of devices). After discussing hardware with work colleagues, my heart - heavily guided by my brain - turned to this alternative to a MacBook Air (cheaper): ASUS Zenbook UX305 13.3&quot; Laptop - White Here are its specifications: Processor: Dual-Core Intel Core M-5Y10c, RAM: 8GB, Size: 324x226x12mm, Weight: 1.2kg, Screen size: 13.3 inches, Screen resolution: 1,920x1,080 Graphics adaptor: Intel HD 5300 Total storage: 128GB SSD It's quick, light, sleek. The screen resolution could be better - it is in fact better on later models (3200 x 1800, processor has been upgraded too). Quality was enough for my needs. Then I thought, 'hold on, I don't want another Windows and I could do with some experience fiddling with a Linux distribution'. Yes, for the record, I think like that. S omeone said the magic word! DUALBOOT - when you can choose to boot on Windows or Linux. I knew what it meant, just never had used it or set it up. New==shiny so I tried. After that I had to make a choice, between the linux distros out there. After discussing the matter with my privy council, I knew I had to choose between Debian and Fedora. I went for Fedora (23). My main reasons: - they are early adopters - my affinity with software/frameworks used by Fedora backer I had to get my hands dirty and just move on to install. I generally prefer formatting my devices to avoid any unnecessary issue. I wiped my usb drive clean and followed the guide below: Windows quick start (direct write) This method will destroy all data on the USB stick. Download a Fedora image, choose a USB stick that does not contain any data you need, and connect it. Download and run Rawrite32. Choose the Fedora image as the Filesystem image (Rawrite32) - if the image file is not shown, you may have to change the file selector options or change the image's extension. Choose the USB stick in the drop-down box as the Target (Rawrite32). Double-check you're really, really sure you don't need any of the data on the USB stick! Click Write to disk... (Rawrite32). Wait for the operation to complete, then reboot your computer. Do whatever you need to do to boot from a USB stick - often this will involve pressing or holding down F12, F2 or Del. On the ASUS Zenbook UX305 here is what you have to do: - restart computer - press escape key quickly as computer restarts - navigate to Security Tab: - then to Secure Boot Menu: Disable this control to enable booting via your usb key. This setting is supposed to help protect against rootkits and other malware infecting the boot loader. Once the comp boots on the usb where the image has been written, it's a matter of following fedora's instructions and clicking 'Next'. Tadam!</summary></entry><entry><title type="html">Generated headache</title><link href="https://natachasegala.co.uk/meta-thinking-beyond/chomsky-generated-headache/" rel="alternate" type="text/html" title="Generated headache" /><published>2016-02-16T11:55:54+00:00</published><updated>2016-02-16T11:55:54+00:00</updated><id>https://natachasegala.co.uk/meta-thinking-beyond/chomsky-generated-headache</id><content type="html" xml:base="https://natachasegala.co.uk/meta-thinking-beyond/chomsky-generated-headache/">&lt;p&gt;I recently had a discussion with the VP of engineering at my current company.&lt;br /&gt;
Unsurprisingly, we were gently arguing over learning natural languages vs learning programming languages.&lt;br /&gt;
Over a beer (I thought this is important for setting the context) and a halloumi burger (also important).&lt;/p&gt;
&lt;p&gt;Empirically, I feel the common denominator to most of what I learn is my love for patterns.&lt;/p&gt;
&lt;p&gt;Not that it's important, but here is a non-exhaustive list:&lt;br /&gt;
Social psychology: study of patterns in thoughts, feelings, and behaviors as influenced by the presence of others.&lt;br /&gt;
Puzzle/detective games, books and shows: any games where a mystery has to be solved.&lt;br /&gt;
eg. The Raven - Legacy of a Master Thief, Black Closet, ...&lt;br /&gt;
Detective tabletop RPGs and &lt;a href=&quot;https://en.wikipedia.org/wiki/Murder_mystery_game&quot; target=&quot;_blank&quot;&gt;Murder Mystery game nights&lt;/a&gt;.&lt;br /&gt;
The Sherlock Holmes Canon, etc, etc, etc, you get the idea.&lt;/p&gt;
&lt;p&gt;Now, languages:&lt;br /&gt;
I studied Latin as a child and I knew my interest for it could not have been communication or pleasure in pronunciation - it's a dead language. I realised I liked it because I knew it had a structure which I acknowledged and which helped deconstruct it for translation. I could also deconstruct/parse any word from my native language based on Latin and the shreds of Greek I have acquired over time. Languages are like a puzzle game. Figuring out where things go and what their permissions are (like a three-dimensional chess).&lt;/p&gt;
&lt;p&gt;I could link a zillion articles to the benefits of learning.&lt;br /&gt;
I could link a zillion on top relating to the benefits of learning languages.&lt;br /&gt;
Maybe not a zillion, k.&lt;br /&gt;
&lt;a href=&quot;http://www.theguardian.com/education/2014/sep/04/what-happens-to-the-brain-language-learning&quot; target=&quot;_blank&quot;&gt;Here's one which looks at what happens in your brain.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fast forward to university. One day, I was dozing through a linguistics class when the professor started drawing some strange glyphs on the board.&lt;br /&gt;
&lt;img src=&quot;/assets/2000px-Basic_english_syntax_tree.svg.png&quot; alt=&quot;Generative Grammar&quot; width=&quot;200&quot; height=&quot;223&quot; /&gt;&lt;br /&gt;
And some more - vaguely reminding me of arithmetic and geometric progressions.&lt;br /&gt;
I rubbed my eyes, I was still studying English for sure. I had simply become acquainted with the work of a contemporary genius, namely &lt;a href=&quot;https://en.wikipedia.org/wiki/Noam_Chomsky&quot; target=&quot;_blank&quot;&gt;Noam Chomsky&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What is interesting in this generative grammar theory of his (I am not pretending to be anywhere close to an expert) is how it struck me as a programmatic construct.&lt;br /&gt;
This stayed with me. It triggers a whole lot of questions.&lt;br /&gt;
Are these constructs led by rules born out of human chaos/fancy?&lt;br /&gt;
Or is there something more deterministic based on our context/dependencies (inc. brain capacities, environment, etc)?&lt;br /&gt;
This is more in line with what he looks at in his universal grammar moving towards...&lt;br /&gt;
the last bit of his work - minimalist program. Not grammar, you got that right, PROGRAM.&lt;/p&gt;
&lt;p&gt;Natural language as a system based on economy produced by plastic cerebral circuits.&lt;/p&gt;
&lt;p&gt;I am not saying natural and programming languages are the same but they are related.&lt;br /&gt;
If their similarities help understand the other, it must thereby also help with learning the other.&lt;/p&gt;
&lt;p&gt;For more insight on the topic:&lt;br /&gt;
&lt;a href=&quot;https://www.cs.wmich.edu/~bhardin/cs4850/ChomskyPresentation.pdf&quot; target=&quot;_blank&quot;&gt;A presentation of Chomsky Hierarchy&lt;/a&gt;&lt;br /&gt;
AND&lt;br /&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/vhiiia1_hC4&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;I would love to hear your opinion on the matter, especially as I sense this might be a very simplistic post on a very rich subject.&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><summary type="html">I recently had a discussion with the VP of engineering at my current company. Unsurprisingly, we were gently arguing over learning natural languages vs learning programming languages. Over a beer (I thought this is important for setting the context) and a halloumi burger (also important). Empirically, I feel the common denominator to most of what I learn is my love for patterns. Not that it's important, but here is a non-exhaustive list: Social psychology: study of patterns in thoughts, feelings, and behaviors as influenced by the presence of others. Puzzle/detective games, books and shows: any games where a mystery has to be solved. eg. The Raven - Legacy of a Master Thief, Black Closet, ... Detective tabletop RPGs and Murder Mystery game nights. The Sherlock Holmes Canon, etc, etc, etc, you get the idea. Now, languages: I studied Latin as a child and I knew my interest for it could not have been communication or pleasure in pronunciation - it's a dead language. I realised I liked it because I knew it had a structure which I acknowledged and which helped deconstruct it for translation. I could also deconstruct/parse any word from my native language based on Latin and the shreds of Greek I have acquired over time. Languages are like a puzzle game. Figuring out where things go and what their permissions are (like a three-dimensional chess). I could link a zillion articles to the benefits of learning. I could link a zillion on top relating to the benefits of learning languages. Maybe not a zillion, k. Here's one which looks at what happens in your brain. Fast forward to university. One day, I was dozing through a linguistics class when the professor started drawing some strange glyphs on the board. And some more - vaguely reminding me of arithmetic and geometric progressions. I rubbed my eyes, I was still studying English for sure. I had simply become acquainted with the work of a contemporary genius, namely Noam Chomsky. What is interesting in this generative grammar theory of his (I am not pretending to be anywhere close to an expert) is how it struck me as a programmatic construct. This stayed with me. It triggers a whole lot of questions. Are these constructs led by rules born out of human chaos/fancy? Or is there something more deterministic based on our context/dependencies (inc. brain capacities, environment, etc)? This is more in line with what he looks at in his universal grammar moving towards... the last bit of his work - minimalist program. Not grammar, you got that right, PROGRAM. Natural language as a system based on economy produced by plastic cerebral circuits. I am not saying natural and programming languages are the same but they are related. If their similarities help understand the other, it must thereby also help with learning the other. For more insight on the topic: A presentation of Chomsky Hierarchy AND I would love to hear your opinion on the matter, especially as I sense this might be a very simplistic post on a very rich subject.</summary></entry><entry><title type="html">The missing widget</title><link href="https://natachasegala.co.uk/bitsbobsofcodes/the-missing-widget/" rel="alternate" type="text/html" title="The missing widget" /><published>2016-02-14T18:51:34+00:00</published><updated>2016-02-14T18:51:34+00:00</updated><id>https://natachasegala.co.uk/bitsbobsofcodes/the-missing-widget</id><content type="html" xml:base="https://natachasegala.co.uk/bitsbobsofcodes/the-missing-widget/">&lt;p&gt;There I was, scratching my head, trying to figure out what to add as a widget to the dreaded footer.&lt;br /&gt;
The footer ie. a no-man's land where no human has ever &lt;del datetime=&quot;2016-02-14T18:00:07+00:00&quot;&gt;set&lt;/del&gt; scrolled to.&lt;br /&gt;
As per the usual, I turned to my best tech mate aka the Big G. aka Google and there I found some light.&lt;br /&gt;
Goodreads offer a nice widget to display your current reading. Fine. 1 down. 2 to go.&lt;/p&gt;
&lt;p&gt;Because I am &lt;em&gt;slightly&lt;/em&gt; obsessed with &lt;a href=&quot;http://natachasegala.co.uk/?p=3&quot; target=&quot;_blank&quot;&gt;learning natural languages&lt;/a&gt; as well as programming, I thought, heck, let's add a duolingo widget.&lt;br /&gt;
Except - except there is not one. At least, none that I could find on PAGE 1 of my google searches (anything beyond is known as the big un-relevant unknown).&lt;/p&gt;
&lt;p&gt;I found &lt;a href=&quot;https://github.com/KartikTalwar/Duolingo&quot; target=&quot;_blank&quot;&gt;this bit of duolingo-related python on github&lt;/a&gt;.&lt;br /&gt;
And I proceeded to create an app:&lt;br /&gt;
1. First got the json from https://www.duolingo.com/users/&lt;br /&gt;
2. Accessed the response body thanks to the &lt;a href=&quot;https://github.com/jnunemaker/httparty&quot; target=&quot;_blank&quot;&gt;lovely httparty gem&lt;/a&gt;&lt;br /&gt;
3. Once, I had my hash, navigated to the key I was interested in (because the response contains A LOT more than what I needed)&lt;br /&gt;
4. From there, got an array which contained hashes that contained the relevant info - phew, breathe.&lt;br /&gt;
5. Looped through array and selected hash where learning was set to true&lt;br /&gt;
6. Sorted array based on hash with higher value for 'Level'&lt;/p&gt;
&lt;p&gt;I have learned in the process a bit more about iframes than I used to.&lt;br /&gt;
I have also learned that by default, Rails do not allow for iframes.&lt;br /&gt;
More info &lt;a href=&quot;http://edgeguides.rubyonrails.org/security.html#default-headers&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/16561066/ruby-on-rails-4-app-not-works-in-iframe&quot; target=&quot;_blank&quot;&gt;there&lt;/a&gt;.&lt;br /&gt;
I wanted some cross-domain to happen.&lt;br /&gt;
Since this app is a show only without any kind of security involved, I figured it would not hurt to change the default headers to 'ALLOWALL'. Which I did.&lt;/p&gt;
&lt;p&gt;Before creating the app, I created the method, to make sure I could do what I wanted with the response.&lt;br /&gt;
I started yesterday and you can see what kind of time I spent based on my commits.&lt;br /&gt;
I am a bit ashamed to say I struggled to...play with the nested-ry of the whole response more than with the logic to apply- if that makes any kind of sense.&lt;/p&gt;
&lt;pre lang=&quot;LANGUAGE&quot; line=&quot;10&quot;&gt;
  def duolingo
#so this sets variables to be used in the scope (ie. context/frame) of the class (called Widget - all praise my creativity)
#the params[:something] is useful to get parameters from the user's browser when they request the page
#(e.g. &quot;http://www.mysite.com/something=&quot;whattheuserwantstoget&quot;)
  @username = params[:username]
#this below also set a class variable which calls the method init and stores its result
  @content = WidgetController.init(username)
  end

#the thing that makes it work
   def self.init(username=&quot;&quot;)
#if no username is passed in the url, I don't want my app to break so I am making sure something is passed
   		if !username.nil?
#Please httparty get me the info I need from duolingo based on the username passed in url
        response = HTTParty.get('https://www.duolingo.com/users/' + username)
#Parse the body to Json (meaning I also include the json gem in my gemfile)
        json = JSON.parse(response.body)
#get me the value for 'languages' key
        hash = json[&quot;languages&quot;]
#I know it's an array full of hashes (how sick is that?) so loop through the array
        hash = hash.each do |x|
#destructively select any key value pair which key includes
#streak, language_string,points,level, to_next_level, learning ONLY IF value for learning is true
                x.select!{|k,v| k =~ /streak|language_string|points|level|to_next_level|learning/ &amp;&amp; x[&quot;learning&quot;]}
            end
#now now some cleanup, reject any empty hash left from select and sort this array by level descending, ta very much
        hash = hash.reject { |c| c.empty? }.sort_by { |hsh| hsh[&quot;level&quot;] }.reverse!
   		end
       end
#the end!
&lt;/pre&gt;
&lt;p&gt;I wrapped that engine (controller) in a pretty (scss) box (view) and that's it.&lt;br /&gt;
I am able (check the footer, tadam!) to embed the generated/formatted/styled html via an iframe tag.&lt;br /&gt;
It was either that or learning PHP in less than 6h. Errr.&lt;/p&gt;</content><author><name>{&quot;email&quot;=&gt;&quot;natseg@gmail.com&quot;, &quot;display_name&quot;=&gt;&quot;natseg&quot;}</name><email>natseg@gmail.com</email></author><summary type="html">There I was, scratching my head, trying to figure out what to add as a widget to the dreaded footer. The footer ie. a no-man's land where no human has ever set scrolled to. As per the usual, I turned to my best tech mate aka the Big G. aka Google and there I found some light. Goodreads offer a nice widget to display your current reading. Fine. 1 down. 2 to go. Because I am slightly obsessed with learning natural languages as well as programming, I thought, heck, let's add a duolingo widget. Except - except there is not one. At least, none that I could find on PAGE 1 of my google searches (anything beyond is known as the big un-relevant unknown). I found this bit of duolingo-related python on github. And I proceeded to create an app: 1. First got the json from https://www.duolingo.com/users/ 2. Accessed the response body thanks to the lovely httparty gem 3. Once, I had my hash, navigated to the key I was interested in (because the response contains A LOT more than what I needed) 4. From there, got an array which contained hashes that contained the relevant info - phew, breathe. 5. Looped through array and selected hash where learning was set to true 6. Sorted array based on hash with higher value for 'Level' I have learned in the process a bit more about iframes than I used to. I have also learned that by default, Rails do not allow for iframes. More info here and there. I wanted some cross-domain to happen. Since this app is a show only without any kind of security involved, I figured it would not hurt to change the default headers to 'ALLOWALL'. Which I did. Before creating the app, I created the method, to make sure I could do what I wanted with the response. I started yesterday and you can see what kind of time I spent based on my commits. I am a bit ashamed to say I struggled to...play with the nested-ry of the whole response more than with the logic to apply- if that makes any kind of sense. def duolingo #so this sets variables to be used in the scope (ie. context/frame) of the class (called Widget - all praise my creativity) #the params[:something] is useful to get parameters from the user's browser when they request the page #(e.g. &quot;http://www.mysite.com/something=&quot;whattheuserwantstoget&quot;) @username = params[:username] #this below also set a class variable which calls the method init and stores its result @content = WidgetController.init(username) end</summary></entry></feed>